{"ast":null,"code":"import _slicedToArray from \"/Users/matosky/pomade-covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/matosky/pomade-covid/src/views/QuestionList/QuestionsListTable.js\";\nimport React, { useEffect, useState } from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { useSelector, useDispatch } from 'react-redux';\nimport MaterialTable from 'material-table';\nimport { fetchAllQuestions } from './../../actions/questions';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Link } from 'react-router-dom';\n\nconst QuestionsListTable = () => {\n  const questionsList = useSelector(state => state.questions.list);\n  const dispatch = useDispatch();\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1]; // useEffect(() => {\n  //   setLoading('true');\n  //   const onSuccess = () => {\n  //     setLoading(false)\n  //   }\n  //   const onError = () => {\n  //     setLoading(false)     \n  //   }\n  //   dispatch(fetchAllQuestions(onSuccess,onError));\n  // }, [fetchAllQuestions]); //componentDidMount\n\n\n  useEffect(() => {\n    setLoading('true');\n\n    const onSuccess = () => {\n      setLoading(false);\n    };\n\n    const onError = () => {\n      setLoading(false);\n    };\n\n    dispatch(fetchAllQuestions(onSuccess, onError));\n  }, [dispatch]); //const questList = questionsList\n\n  return React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(MaterialTable, {\n    title: \"Questions List Table\",\n    columns: [{\n      title: \" ID\",\n      field: \"Id\"\n    }, {\n      title: \"Question\",\n      field: \"question\"\n    }, {\n      title: \"Question Type \",\n      field: \"type\",\n      filtering: false\n    }, {\n      title: \"Option\",\n      field: \"option\",\n      filtering: false\n    }, {\n      title: \"Action\",\n      field: \"actions\",\n      filtering: false\n    }],\n    isLoading: loading,\n    data: questionsList.map(row => ({\n      Id: row.id,\n      question: row.question,\n      type: row.checkstatusanswermode,\n      option: row.options.length,\n      actions: React.createElement(Link, {\n        to: {\n          pathname: \"/collect-result\",\n          state: {\n            getpatientlists: {\n              row\n            }\n          }\n        },\n        style: {\n          cursor: \"pointer\",\n          color: \"blue\",\n          fontStyle: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"Enter Result\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        \"aria-label\": \"Enter Result\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(VisibilityIcon, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }))))\n    })),\n    options: {\n      headerStyle: {\n        backgroundColor: \"#9F9FA5\",\n        color: \"#000\",\n        margin: \"auto\"\n      },\n      filtering: true,\n      exportButton: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })));\n};\n\nexport default QuestionsListTable;","map":{"version":3,"sources":["/Users/matosky/pomade-covid/src/views/QuestionList/QuestionsListTable.js"],"names":["React","useEffect","useState","PerfectScrollbar","useSelector","useDispatch","MaterialTable","fetchAllQuestions","VisibilityIcon","Tooltip","IconButton","Link","QuestionsListTable","questionsList","state","questions","list","dispatch","loading","setLoading","onSuccess","onError","title","field","filtering","map","row","Id","id","question","type","checkstatusanswermode","option","options","length","actions","pathname","getpatientlists","cursor","color","fontStyle","headerStyle","backgroundColor","margin","exportButton"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,QAAMC,aAAa,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBC,IAA1B,CAAjC;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AAF+B,oBAGDH,QAAQ,CAAC,EAAD,CAHP;AAAA;AAAA,QAGxBgB,OAHwB;AAAA,QAGfC,UAHe,kBAI/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,UAAU,CAAC,MAAD,CAAV;;AACA,UAAMC,SAAS,GAAG,MAAM;AACtBD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAFD;;AAGA,UAAME,OAAO,GAAG,MAAM;AACpBF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAFD;;AAGFF,IAAAA,QAAQ,CAACV,iBAAiB,CAACa,SAAD,EAAWC,OAAX,CAAlB,CAAR;AACD,GATQ,EASN,CAACJ,QAAD,CATM,CAAT,CAd+B,CAwB/B;;AAGA,SAEM,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,aAAD;AACF,IAAA,KAAK,EAAC,sBADJ;AAEF,IAAA,OAAO,EAAE,CACP;AAAEK,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,KAAK,EAAE;AAAvB,KADO,EAEP;AACED,MAAAA,KAAK,EAAE,UADT;AAEEC,MAAAA,KAAK,EAAE;AAFT,KAFO,EAOP;AACED,MAAAA,KAAK,EAAE,gBADT;AAEEC,MAAAA,KAAK,EAAE,MAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KAPO,EAYP;AACEF,MAAAA,KAAK,EAAE,QADT;AAEEC,MAAAA,KAAK,EAAE,QAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KAZO,EAiBP;AACEF,MAAAA,KAAK,EAAE,QADT;AAEEC,MAAAA,KAAK,EAAE,SAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KAjBO,CAFP;AAyBF,IAAA,SAAS,EAAEN,OAzBT;AA0BF,IAAA,IAAI,EAAEL,aAAa,CAACY,GAAd,CAAmBC,GAAD,KAAU;AAChCC,MAAAA,EAAE,EAAED,GAAG,CAACE,EADwB;AAEhCC,MAAAA,QAAQ,EAAEH,GAAG,CAACG,QAFkB;AAGhCC,MAAAA,IAAI,EAAEJ,GAAG,CAACK,qBAHsB;AAIhCC,MAAAA,MAAM,EAAEN,GAAG,CAACO,OAAJ,CAAYC,MAJY;AAMhCC,MAAAA,OAAO,EAAE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAG;AACNC,UAAAA,QAAQ,EAAE,iBADJ;AAENtB,UAAAA,KAAK,EAAE;AAAEuB,YAAAA,eAAe,EAAC;AAACX,cAAAA;AAAD;AAAlB;AAFD,SAAX;AAIK,QAAA,KAAK,EAAE;AAAEY,UAAAA,MAAM,EAAE,SAAV;AAAqBC,UAAAA,KAAK,EAAE,MAA5B;AACPC,UAAAA,SAAS,EAAE;AADJ,SAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMO,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAY,sBAAW,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CADF,CANP;AANuB,KAAV,CAAlB,CA1BJ;AA8CF,IAAA,OAAO,EAAE;AAEPC,MAAAA,WAAW,EAAE;AACXC,QAAAA,eAAe,EAAE,SADN;AAEXH,QAAAA,KAAK,EAAE,MAFI;AAGXI,QAAAA,MAAM,EAAE;AAHG,OAFN;AAOPnB,MAAAA,SAAS,EAAE,IAPJ;AAQPoB,MAAAA,YAAY,EAAE;AARP,KA9CP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF,CAFN;AAmED,CA9FD;;AAkGA,eAAehC,kBAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { useSelector, useDispatch } from 'react-redux';\nimport MaterialTable from 'material-table';\nimport { fetchAllQuestions } from './../../actions/questions'\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Link } from 'react-router-dom'\n\nconst QuestionsListTable = () => {\n  const questionsList = useSelector(state => state.questions.list);\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState('')\n  // useEffect(() => {\n  //   setLoading('true');\n  //   const onSuccess = () => {\n  //     setLoading(false)\n  //   }\n  //   const onError = () => {\n  //     setLoading(false)     \n  //   }\n  //   dispatch(fetchAllQuestions(onSuccess,onError));\n  // }, [fetchAllQuestions]); //componentDidMount\n  useEffect(() => {\n      setLoading('true');\n      const onSuccess = () => {\n        setLoading(false)\n      }\n      const onError = () => {\n        setLoading(false)     \n      }\n    dispatch(fetchAllQuestions(onSuccess,onError))\n  }, [dispatch])\n  //const questList = questionsList\n\n\n  return (\n\n        <PerfectScrollbar>\n          <div >\n          <MaterialTable\n        title=\"Questions List Table\"\n        columns={[\n          { title: \" ID\", field: \"Id\" },\n          {\n            title: \"Question\",\n            field: \"question\",\n          },\n          \n          {\n            title: \"Question Type \",\n            field: \"type\",\n            filtering: false\n          },\n          {\n            title: \"Option\",\n            field: \"option\",\n            filtering: false\n          },\n          {\n            title: \"Action\",\n            field: \"actions\",\n            filtering: false,\n          },\n        ]}\n        isLoading={loading}\n        data={questionsList.map((row) => ({\n          Id: row.id,\n          question: row.question,          \n          type: row.checkstatusanswermode,\n          option: row.options.length,\n         \n          actions: <Link to ={{ \n                        pathname: \"/collect-result\",  \n                        state: { getpatientlists:{row}}\n                        }} \n                        style={{ cursor: \"pointer\", color: \"blue\", \n                        fontStyle: \"bold\" }}>\n                          <Tooltip title=\"Enter Result\">\n                            <IconButton aria-label=\"Enter Result\" >\n                            <VisibilityIcon color=\"primary\"/>\n                          </IconButton>\n                          </Tooltip>\n                        </Link>\n\n            }))}\n        options={{\n        \n          headerStyle: {\n            backgroundColor: \"#9F9FA5\",\n            color: \"#000\",\n            margin: \"auto\"\n          },\n          filtering: true,          \n          exportButton: true,\n          \n        }}\n\n      />\n          </div>\n        </PerfectScrollbar>\n     \n  );\n};\n\n\n\nexport default QuestionsListTable;\n"]},"metadata":{},"sourceType":"module"}