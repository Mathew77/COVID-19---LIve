{"ast":null,"code":"import _objectSpread from \"/Users/matosky/pomade-covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/matosky/pomade-covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/matosky/pomade-covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matosky/pomade-covid/src/views/HealthTipsTypes/ActionModal/ModalEdit.js\";\nimport React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button } from '@material-ui/core';\nimport { Card, CardContent, CardActions, Divider, Grid, TextField } from '@material-ui/core';\nimport { Spinner } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { createHealthType } from './../../../actions/healthtips';\nimport { useHistory } from \"react-router-dom\";\n\nconst styles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2)\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  row: {\n    height: '42px',\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: theme.spacing(1)\n  },\n  spacer: {\n    flexGrow: 1\n  },\n  input: {\n    display: 'none'\n  }\n}));\nconst DialogTitle = withStyles(styles)(props => {\n  const children = props.children,\n        classes = props.classes,\n        onClose = props.onClose,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"onClose\"]);\n\n  return React.createElement(MuiDialogTitle, Object.assign({\n    disableTypography: true,\n    className: classes.root\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, children), onClose ? React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    className: classes.closeButton,\n    onClick: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(CloseIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })) : null);\n});\nconst DialogContent = withStyles(theme => ({\n  root: {\n    padding: theme.spacing(2)\n  }\n}))(MuiDialogContent);\n\nconst AddHealthType = props => {\n  const typename = props.tips ? props.tips.name : null;\n  let history = useHistory();\n  const classes = useStyles();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState({\n    name: \"\"\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        values = _useState4[0],\n        setValues = _useState4[1];\n\n  const edithealthtype = e => {\n    e.preventDefault();\n    console.log(values);\n\n    const onSuccess = () => {\n      setLoading(false);\n      history.push(\"/healthtips\");\n      props.handleClose();\n    };\n\n    const onError = () => {\n      setLoading(false);\n      props.handleClose();\n    };\n\n    props.createHealthType(values, onSuccess, onError);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    onClose: props.handleClose,\n    \"aria-labelledby\": \"customized-dialog-title\",\n    open: props.open,\n    fullWidth: \"false\",\n    maxWidth: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"customized-dialog-title\",\n    onClose: props.handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Edit Health Tips Type\"), React.createElement(DialogContent, {\n    dividers: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    onSubmit: edithealthtype,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    md: 12,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    fullWidth: true,\n    label: \"Health Type\",\n    id: \"name\",\n    className: classes.textField,\n    helperText: \"Health Type\",\n    onChange: e => setValues(_objectSpread({}, values, {\n      name: e.target.value\n    })),\n    variant: \"outlined\",\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), React.createElement(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, loading ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }) : \"\", React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Update\")))))));\n};\n\nexport default connect(null, {\n  createHealthType\n})(AddHealthType);","map":{"version":3,"sources":["/Users/matosky/pomade-covid/src/views/HealthTipsTypes/ActionModal/ModalEdit.js"],"names":["React","useState","withStyles","Dialog","MuiDialogTitle","MuiDialogContent","IconButton","CloseIcon","Typography","makeStyles","Button","Card","CardContent","CardActions","Divider","Grid","TextField","Spinner","connect","createHealthType","useHistory","styles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","useStyles","row","height","display","alignItems","marginTop","spacer","flexGrow","input","DialogTitle","props","children","classes","onClose","other","DialogContent","AddHealthType","typename","tips","name","history","loading","setLoading","values","setValues","edithealthtype","e","preventDefault","console","log","onSuccess","push","handleClose","onError","open","textField","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button } from '@material-ui/core';\nimport {\n    Card,\n    CardContent,\n    CardActions,\n    Divider,\n    Grid,\n    TextField\n  } from '@material-ui/core';\n\nimport { Spinner } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport {createHealthType} from './../../../actions/healthtips'\nimport { useHistory } from \"react-router-dom\"; \n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  \n});\n\nconst useStyles = makeStyles(theme => ({\n    root: {},\n    row: {\n      height: '42px',\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: theme.spacing(1)\n    },\n    spacer: {\n      flexGrow: 1\n    },\n    \n    input: {\n        display: 'none',\n      },\n  }));\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\n\n const  AddHealthType = (props) => {\n  const typename= props.tips ? props.tips.name : null ;\n  let history = useHistory(); \n  const classes = useStyles();\n  const [loading, setLoading] = useState(false)\n\n  const [values, setValues] = useState({name:\"\"});\n\n  const edithealthtype = e => {\n    e.preventDefault()\n    console.log(values)\n    const onSuccess = () => {\n        setLoading(false);\n        history.push(\"/healthtips\");\n        props.handleClose() \n\n\n      }\n      const onError = () => {\n        setLoading(false); \n        props.handleClose()       \n      }\n      props.createHealthType(values, onSuccess,onError)\n  }\n\n\n  return (\n    <div>\n     \n      <Dialog onClose={props.handleClose} aria-labelledby=\"customized-dialog-title\" open={props.open}\n            fullWidth='false'\n            maxWidth='sm'\n      >\n        <DialogTitle id=\"customized-dialog-title\" onClose={props.handleClose}>\n          Edit Health Tips Type\n        </DialogTitle>\n        <DialogContent dividers>\n        <Card>\n            <form\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={edithealthtype}\n            >\n               \n                <CardContent>\n\n                <Grid\n                    container\n                    spacing={3}\n                >\n                   \n                    <Grid\n                    item\n                    md={12}\n                    xs={12}\n                    >\n                    \n                     <TextField\n                        fullWidth\n                        label=\"Health Type\"\n                        id=\"name\"\n                        className={classes.textField}\n                        helperText=\"Health Type\"\n                        onChange={e =>\n                            setValues({\n                              ...values,\n                              name: e.target.value\n                            })\n                          }\n                        variant=\"outlined\"\n                        type=\"text\"\n                       \n                    />\n                    </Grid>\n                   \n                 \n                </Grid>\n                </CardContent>\n                <Divider />\n                <CardActions>\n                {loading ? <Spinner /> : \"\"}\n\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        type='submit'\n                    >\n                        Update\n                    </Button>\n                 \n                </CardActions>\n            </form>\n         </Card>\n        </DialogContent>\n\n      </Dialog>\n    </div>\n  );\n}\n\n\nexport default connect(null, { createHealthType })(AddHealthType);\n\n\n"]},"metadata":{},"sourceType":"module"}