{"ast":null,"code":"import axios from \"axios\";\nimport { url as baseUrl } from \"../api\";\nimport * as ACTION_TYPES from \"./types\";\n/**\n * @Actions\n * CheckIn CRUD OPERATIONS\n * returns API response from server\n * =================================\n * fetchAll()\n * fetchById()\n * create()\n * update()\n * Delete()\n */\n\nexport const fetchAllFHealthTips = (onSuccess, onError) => dispatch => {\n  axios.get(\"\".concat(baseUrl, \"healthtips\")).then(response => {\n    dispatch({\n      type: ACTION_TYPES.FETCH_ALL_HEALTHTIPS,\n      payload: response.data\n    });\n    console.log(response);\n    onSuccess();\n  }).catch(error => {\n    onError();\n    console.log(error);\n  });\n};\nexport const createCollectedSample = (data, lab_id, onSuccess, onError) => dispatch => {\n  if (lab_id) {\n    axios.put(\"\".concat(baseUrl, \"form-data/\").concat(lab_id), data).then(response => {\n      dispatch({\n        type: ACTION_TYPES.CREATE_COLLECT_SAMPLE,\n        payload: response.data\n      });\n      onSuccess();\n      toast.success(\"Sample Collection was successful\"); //setInterval(window.location.reload(false), 80000);\n    }).catch(error => {\n      dispatch({\n        type: ACTION_TYPES.ERROR_CREATE_COLLECT_SAMPLE,\n        payload: error\n      });\n      onError();\n      toast.error(\"Something went wrong, please try again\"); //setInterval(window.location.reload(false), 80000);\n      //window.location.reload()\n    });\n  } else {\n    toast.error(\"Something went wrong, please try again\");\n  }\n};","map":{"version":3,"sources":["/Users/matosky/pomade-covid/src/actions/healthtips.js"],"names":["axios","url","baseUrl","ACTION_TYPES","fetchAllFHealthTips","onSuccess","onError","dispatch","get","then","response","type","FETCH_ALL_HEALTHTIPS","payload","data","console","log","catch","error","createCollectedSample","lab_id","put","CREATE_COLLECT_SAMPLE","toast","success","ERROR_CREATE_COLLECT_SAMPLE"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAG,IAAIC,OAAhB,QAA+B,QAA/B;AACA,OAAO,KAAKC,YAAZ,MAA8B,SAA9B;AAGA;;;;;;;;;;;;AAYA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAwBC,QAAQ,IAAI;AAErEP,EAAAA,KAAK,CACFQ,GADH,WACUN,OADV,iBAEGO,IAFH,CAEQC,QAAQ,IAAI;AAChBH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER,YAAY,CAACS,oBADZ;AAEPC,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFX,KAAD,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACAL,IAAAA,SAAS;AACV,GATH,EAUGY,KAVH,CAUSC,KAAK,IAAI;AACdZ,IAAAA,OAAO;AACPS,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,GAbH;AAcD,CAhBM;AAkBP,OAAO,MAAMC,qBAAqB,GAAG,CAACL,IAAD,EAAOM,MAAP,EAAef,SAAf,EAA0BC,OAA1B,KAAuCC,QAAQ,IAAI;AAEpF,MAAGa,MAAH,EAAU;AAEVpB,IAAAA,KAAK,CACFqB,GADH,WACUnB,OADV,uBAC8BkB,MAD9B,GACwCN,IADxC,EAEGL,IAFH,CAEQC,QAAQ,IAAI;AAChBH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAER,YAAY,CAACmB,qBADZ;AAEPT,QAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFX,OAAD,CAAR;AAIAT,MAAAA,SAAS;AACTkB,MAAAA,KAAK,CAACC,OAAN,CAAc,kCAAd,EANgB,CAOhB;AACD,KAVH,EAWGP,KAXH,CAWSC,KAAK,IAAG;AAEbX,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAER,YAAY,CAACsB,2BADZ;AAEPZ,QAAAA,OAAO,EAAEK;AAFF,OAAD,CAAR;AAIAZ,MAAAA,OAAO;AACPiB,MAAAA,KAAK,CAACL,KAAN,CAAY,wCAAZ,EAPa,CAQb;AACA;AAED,KAtBH;AAuBC,GAzBD,MAyBK;AACHK,IAAAA,KAAK,CAACL,KAAN,CAAY,wCAAZ;AACD;AACF,CA9BI","sourcesContent":["import axios from \"axios\";\nimport { url as baseUrl } from \"../api\";\nimport * as ACTION_TYPES from \"./types\";\n\n\n/**\n * @Actions\n * CheckIn CRUD OPERATIONS\n * returns API response from server\n * =================================\n * fetchAll()\n * fetchById()\n * create()\n * update()\n * Delete()\n */\n\nexport const fetchAllFHealthTips = (onSuccess, onError) => dispatch => {\n\n  axios\n    .get(`${baseUrl}healthtips`)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.FETCH_ALL_HEALTHTIPS,\n        payload: response.data\n      })\n      console.log(response)\n      onSuccess();\n    })\n    .catch(error => {\n      onError();\n      console.log(error)\n    });\n};\n\nexport const createCollectedSample = (data, lab_id, onSuccess, onError ) => dispatch => {\n\n    if(lab_id){\n      \n    axios\n      .put(`${baseUrl}form-data/${lab_id}`, data)\n      .then(response => {\n        dispatch({\n          type: ACTION_TYPES.CREATE_COLLECT_SAMPLE,\n          payload: response.data\n        });\n        onSuccess()\n        toast.success(\"Sample Collection was successful\");\n        //setInterval(window.location.reload(false), 80000);\n      })\n      .catch(error =>{\n        \n        dispatch({\n          type: ACTION_TYPES.ERROR_CREATE_COLLECT_SAMPLE,\n          payload: error\n        })\n        onError()\n        toast.error(\"Something went wrong, please try again\");\n        //setInterval(window.location.reload(false), 80000);\n        //window.location.reload()\n        \n      });\n    }else{\n      toast.error(\"Something went wrong, please try again\");\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}