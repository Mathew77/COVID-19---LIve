{"ast":null,"code":"import _slicedToArray from\"/Users/matosky/pomade-covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import PerfectScrollbar from'react-perfect-scrollbar';import{useSelector,useDispatch}from'react-redux';import MaterialTable from'material-table';import{fetchAllQuestions}from'./../../actions/questions';import VisibilityIcon from'@material-ui/icons/Visibility';import Tooltip from'@material-ui/core/Tooltip';import IconButton from'@material-ui/core/IconButton';import{Link}from'react-router-dom';var QuestionsListTable=function QuestionsListTable(){var questionsList=useSelector(function(state){return state.questions.list;});var dispatch=useDispatch();var _useState=useState(''),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];// useEffect(() => {\n//   setLoading('true');\n//   const onSuccess = () => {\n//     setLoading(false)\n//   }\n//   const onError = () => {\n//     setLoading(false)     \n//   }\n//   dispatch(fetchAllQuestions(onSuccess,onError));\n// }, [fetchAllQuestions]); //componentDidMount\nuseEffect(function(){setLoading('true');var onSuccess=function onSuccess(){setLoading(false);};var onError=function onError(){setLoading(false);};dispatch(fetchAllQuestions(onSuccess,onError));},[dispatch]);//const questList = questionsList\nreturn/*#__PURE__*/React.createElement(PerfectScrollbar,null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(MaterialTable,{title:\"Questions List Table\",columns:[{title:\" ID\",field:\"Id\"},{title:\"Question\",field:\"question\"},{title:\"Question Type \",field:\"type\",filtering:false},{title:\"Option\",field:\"option\",filtering:false},{title:\"Action\",field:\"actions\",filtering:false}],isLoading:loading,data:questionsList.map(function(row){return{Id:row.id,question:row.question,type:row.checkstatusanswermode,option:row.options.length,actions:/*#__PURE__*/React.createElement(Link,{to:{pathname:\"/collect-result\",state:{getpatientlists:{row:row}}},style:{cursor:\"pointer\",color:\"blue\",fontStyle:\"bold\"}},/*#__PURE__*/React.createElement(Tooltip,{title:\"Enter Result\"},/*#__PURE__*/React.createElement(IconButton,{\"aria-label\":\"Enter Result\"},/*#__PURE__*/React.createElement(VisibilityIcon,{color:\"primary\"}))))};}),options:{headerStyle:{backgroundColor:\"#9F9FA5\",color:\"#000\",margin:\"auto\"},filtering:true,exportButton:true}})));};export default QuestionsListTable;","map":{"version":3,"sources":["/Users/matosky/pomade-covid/src/views/QuestionList/QuestionsListTable.js"],"names":["React","useEffect","useState","PerfectScrollbar","useSelector","useDispatch","MaterialTable","fetchAllQuestions","VisibilityIcon","Tooltip","IconButton","Link","QuestionsListTable","questionsList","state","questions","list","dispatch","loading","setLoading","onSuccess","onError","title","field","filtering","map","row","Id","id","question","type","checkstatusanswermode","option","options","length","actions","pathname","getpatientlists","cursor","color","fontStyle","headerStyle","backgroundColor","margin","exportButton"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { useSelector, useDispatch } from 'react-redux';\nimport MaterialTable from 'material-table';\nimport { fetchAllQuestions } from './../../actions/questions'\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Link } from 'react-router-dom'\n\nconst QuestionsListTable = () => {\n  const questionsList = useSelector(state => state.questions.list);\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState('')\n  // useEffect(() => {\n  //   setLoading('true');\n  //   const onSuccess = () => {\n  //     setLoading(false)\n  //   }\n  //   const onError = () => {\n  //     setLoading(false)     \n  //   }\n  //   dispatch(fetchAllQuestions(onSuccess,onError));\n  // }, [fetchAllQuestions]); //componentDidMount\n  useEffect(() => {\n      setLoading('true');\n      const onSuccess = () => {\n        setLoading(false)\n      }\n      const onError = () => {\n        setLoading(false)     \n      }\n    dispatch(fetchAllQuestions(onSuccess,onError))\n  }, [dispatch])\n  //const questList = questionsList\n\n\n  return (\n\n        <PerfectScrollbar>\n          <div >\n          <MaterialTable\n        title=\"Questions List Table\"\n        columns={[\n          { title: \" ID\", field: \"Id\" },\n          {\n            title: \"Question\",\n            field: \"question\",\n          },\n          \n          {\n            title: \"Question Type \",\n            field: \"type\",\n            filtering: false\n          },\n          {\n            title: \"Option\",\n            field: \"option\",\n            filtering: false\n          },\n          {\n            title: \"Action\",\n            field: \"actions\",\n            filtering: false,\n          },\n        ]}\n        isLoading={loading}\n        data={questionsList.map((row) => ({\n          Id: row.id,\n          question: row.question,          \n          type: row.checkstatusanswermode,\n          option: row.options.length,\n         \n          actions: <Link to ={{ \n                        pathname: \"/collect-result\",  \n                        state: { getpatientlists:{row}}\n                        }} \n                        style={{ cursor: \"pointer\", color: \"blue\", \n                        fontStyle: \"bold\" }}>\n                          <Tooltip title=\"Enter Result\">\n                            <IconButton aria-label=\"Enter Result\" >\n                            <VisibilityIcon color=\"primary\"/>\n                          </IconButton>\n                          </Tooltip>\n                        </Link>\n\n            }))}\n        options={{\n        \n          headerStyle: {\n            backgroundColor: \"#9F9FA5\",\n            color: \"#000\",\n            margin: \"auto\"\n          },\n          filtering: true,          \n          exportButton: true,\n          \n        }}\n\n      />\n          </div>\n        </PerfectScrollbar>\n     \n  );\n};\n\n\n\nexport default QuestionsListTable;\n"]},"metadata":{},"sourceType":"module"}