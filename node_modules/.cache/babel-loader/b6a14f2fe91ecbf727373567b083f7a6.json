{"ast":null,"code":"import React, { useRef, useReducer, useEffect, useContext, forwardRef, useMemo, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useId } from '@reach/auto-id';\nimport Popover from '@reach/popover';\nimport { useDescendants, DescendantProvider, useDescendantKeyDown, createDescendantContext, useDescendant } from '@reach/descendants';\nimport { makeId, checkStyles, isFunction, forwardRefWithAs, useForkedRef, wrapEvent, usePrevious, isString, noop, createNamedContext, getOwnerDocument } from '@reach/utils';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} // Actions\n\n\nvar CLEAR_SELECTION_INDEX = \"CLEAR_SELECTION_INDEX\";\nvar CLICK_MENU_ITEM = \"CLICK_MENU_ITEM\";\nvar CLOSE_MENU = \"CLOSE_MENU\";\nvar OPEN_MENU_AT_FIRST_ITEM = \"OPEN_MENU_AT_FIRST_ITEM\";\nvar OPEN_MENU_CLEARED = \"OPEN_MENU_CLEARED\";\nvar SEARCH_FOR_ITEM = \"SEARCH_FOR_ITEM\";\nvar SELECT_ITEM_AT_INDEX = \"SELECT_ITEM_AT_INDEX\";\nvar SET_BUTTON_ID = \"SET_BUTTON_ID\";\nvar MenuDescendantContext =\n/*#__PURE__*/\ncreateDescendantContext(\"MenuDescendantContext\");\nvar MenuContext =\n/*#__PURE__*/\ncreateNamedContext(\"MenuContext\", {});\nvar initialState = {\n  // The button ID is needed for aria controls and can be set directly and\n  // updated for top-level use via context. Otherwise a default is set by useId.\n  // TODO: Consider deprecating direct ID in 1.0 in favor of id at the top level\n  //       for passing deterministic IDs to descendent components.\n  buttonId: null,\n  // Whether or not the menu is expanded\n  isExpanded: false,\n  // When a user begins typing a character string, the selection will change if\n  // a matching item is found\n  typeaheadQuery: \"\",\n  // The index of the current selected item. When the selection is cleared a\n  // value of -1 is used.\n  selectionIndex: -1\n}; ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Menu\r\n *\r\n * The wrapper component for the other components. No DOM element is rendered.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menu\r\n */\n\nvar Menu = function Menu(_ref) {\n  var id = _ref.id,\n      children = _ref.children;\n  var buttonRef = useRef(null);\n  var menuRef = useRef(null);\n  var popoverRef = useRef(null);\n\n  var _useDescendants = useDescendants(),\n      descendants = _useDescendants[0],\n      setDescendants = _useDescendants[1];\n\n  var _useReducer = useReducer(reducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var _id = useId(id);\n\n  var menuId = id || makeId(\"menu\", _id); // We use an event listener attached to the window to capture outside clicks\n  // that close the menu. We don't want the initial button click to trigger this\n  // when a menu is closed, so we can track this behavior in a ref for now.\n  // We shouldn't need this when we rewrite with state machine logic.\n\n  var buttonClickedRef = useRef(false); // We will put children callbacks in a ref to avoid triggering endless render\n  // loops when using render props if the app code doesn't useCallback\n  // https://github.com/reach/reach-ui/issues/523\n\n  var selectCallbacks = useRef([]);\n  var context = {\n    buttonRef: buttonRef,\n    dispatch: dispatch,\n    menuId: menuId,\n    menuRef: menuRef,\n    popoverRef: popoverRef,\n    buttonClickedRef: buttonClickedRef,\n    selectCallbacks: selectCallbacks,\n    state: state\n  }; // When the menu is open, focus is placed on the menu itself so that\n  // keyboard navigation is still possible.\n\n  useEffect(function () {\n    if (state.isExpanded) {\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = true;\n      window.requestAnimationFrame(function () {\n        focus(menuRef.current);\n      });\n    } else {\n      // We want to ignore the immediate focus of a tooltip so it doesn't pop\n      // up again when the menu closes, only pops up when focus returns again\n      // to the tooltip (like native OS tooltips).\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = false;\n    }\n  }, [state.isExpanded]);\n  useEffect(function () {\n    return checkStyles(\"menu-button\");\n  }, []);\n  return React.createElement(DescendantProvider, {\n    context: MenuDescendantContext,\n    items: descendants,\n    set: setDescendants\n  }, React.createElement(MenuContext.Provider, {\n    value: context\n  }, isFunction(children) ? children({\n    isExpanded: state.isExpanded,\n    // TODO: Remove in 1.0\n    isOpen: state.isExpanded\n  }) : children));\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  Menu.displayName = \"Menu\";\n  Menu.propTypes = {\n    children:\n    /*#__PURE__*/\n    PropTypes.oneOfType([PropTypes.func, PropTypes.node])\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuButton\r\n *\r\n * Wraps a DOM `button` that toggles the opening and closing of the dropdown\r\n * menu. Must be rendered inside of a `<Menu>`.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menubutton\r\n */\n\n\nvar MenuButton =\n/*#__PURE__*/\nforwardRefWithAs(function MenuButton(_ref2, forwardedRef) {\n  var _ref2$as = _ref2.as,\n      Comp = _ref2$as === void 0 ? \"button\" : _ref2$as,\n      onKeyDown = _ref2.onKeyDown,\n      onMouseDown = _ref2.onMouseDown,\n      id = _ref2.id,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"as\", \"onKeyDown\", \"onMouseDown\", \"id\"]);\n\n  var _useContext = useContext(MenuContext),\n      buttonRef = _useContext.buttonRef,\n      buttonClickedRef = _useContext.buttonClickedRef,\n      menuId = _useContext.menuId,\n      _useContext$state = _useContext.state,\n      buttonId = _useContext$state.buttonId,\n      isExpanded = _useContext$state.isExpanded,\n      dispatch = _useContext.dispatch;\n\n  var ref = useForkedRef(buttonRef, forwardedRef);\n  useEffect(function () {\n    var newButtonId = id != null ? id : menuId ? makeId(\"menu-button\", menuId) : \"menu-button\";\n\n    if (buttonId !== newButtonId) {\n      dispatch({\n        type: SET_BUTTON_ID,\n        payload: newButtonId\n      });\n    }\n  }, [buttonId, dispatch, id, menuId]);\n\n  function handleKeyDown(event) {\n    switch (event.key) {\n      case \"ArrowDown\":\n      case \"ArrowUp\":\n        event.preventDefault(); // prevent scroll\n\n        dispatch({\n          type: OPEN_MENU_AT_FIRST_ITEM\n        });\n        break;\n\n      case \"Enter\":\n      case \" \":\n        dispatch({\n          type: OPEN_MENU_AT_FIRST_ITEM\n        });\n        break;\n    }\n  }\n\n  function handleMouseDown(event) {\n    if (!isExpanded) {\n      buttonClickedRef.current = true;\n    }\n\n    if (isRightClick(event.nativeEvent)) {\n      return;\n    } else if (isExpanded) {\n      dispatch({\n        type: CLOSE_MENU,\n        payload: {\n          buttonRef: buttonRef\n        }\n      });\n    } else {\n      dispatch({\n        type: OPEN_MENU_CLEARED\n      });\n    }\n  }\n\n  return React.createElement(Comp // When the menu is displayed, the element with role `button` has\n  // `aria-expanded` set to `true`. When the menu is hidden, it is\n  // recommended that `aria-expanded` is not present.\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n  , Object.assign({\n    \"aria-expanded\": isExpanded ? true : undefined,\n    \"aria-haspopup\": true,\n    \"aria-controls\": menuId\n  }, props, {\n    ref: ref,\n    \"data-reach-menu-button\": \"\",\n    id: buttonId || undefined,\n    onKeyDown: wrapEvent(onKeyDown, handleKeyDown),\n    onMouseDown: wrapEvent(onMouseDown, handleMouseDown),\n    type: \"button\"\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuButton.displayName = \"MenuButton\";\n  MenuButton.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuItemImpl\r\n *\r\n * MenuItem and MenuLink share most of the same functionality captured here.\r\n */\n\n\nvar MenuItemImpl =\n/*#__PURE__*/\nforwardRefWithAs(function MenuItemImpl(_ref3, forwardedRef) {\n  var Comp = _ref3.as,\n      indexProp = _ref3.index,\n      _ref3$isLink = _ref3.isLink,\n      isLink = _ref3$isLink === void 0 ? false : _ref3$isLink,\n      onClick = _ref3.onClick,\n      onDragStart = _ref3.onDragStart,\n      onMouseDown = _ref3.onMouseDown,\n      onMouseEnter = _ref3.onMouseEnter,\n      onMouseLeave = _ref3.onMouseLeave,\n      onMouseMove = _ref3.onMouseMove,\n      onMouseUp = _ref3.onMouseUp,\n      onSelect = _ref3.onSelect,\n      valueTextProp = _ref3.valueText,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"as\", \"index\", \"isLink\", \"onClick\", \"onDragStart\", \"onMouseDown\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseMove\", \"onMouseUp\", \"onSelect\", \"valueText\"]);\n\n  var _useContext2 = useContext(MenuContext),\n      buttonRef = _useContext2.buttonRef,\n      dispatch = _useContext2.dispatch,\n      selectCallbacks = _useContext2.selectCallbacks,\n      selectionIndex = _useContext2.state.selectionIndex;\n\n  var ownRef = useRef(null); // After the ref is mounted to the DOM node, we check to see if we have an\n  // explicit valueText prop before looking for the node's textContent for\n  // typeahead functionality.\n\n  var _useState = useState(valueTextProp || \"\"),\n      valueText = _useState[0],\n      setValueText = _useState[1];\n\n  var setValueTextFromDom = useCallback(function (node) {\n    if (node) {\n      ownRef.current = node;\n\n      if (!valueTextProp || node.textContent && valueText !== node.textContent) {\n        setValueText(node.textContent);\n      }\n    }\n  }, [valueText, valueTextProp]);\n  var ref = useForkedRef(forwardedRef, setValueTextFromDom);\n  var mouseEventStarted = useRef(false);\n  var index = useDescendant({\n    context: MenuDescendantContext,\n    element: ownRef.current,\n    key: valueText,\n    isLink: isLink\n  }, indexProp);\n  var isSelected = index === selectionIndex; // Update the callback ref array on every render\n\n  selectCallbacks.current[index] = onSelect;\n\n  function select() {\n    focus(buttonRef.current);\n    onSelect && onSelect();\n    dispatch({\n      type: CLICK_MENU_ITEM\n    });\n  }\n\n  function handleClick(event) {\n    if (isLink && !isRightClick(event.nativeEvent)) {\n      select();\n    }\n  }\n\n  function handleDragStart(event) {\n    // Because we don't preventDefault on mousedown for links (we need the\n    // native click event), clicking and holding on a link triggers a\n    // dragstart which we don't want.\n    if (isLink) {\n      event.preventDefault();\n    }\n  }\n\n  function handleMouseDown(event) {\n    if (isRightClick(event.nativeEvent)) return;\n\n    if (isLink) {\n      // Signal that the mouse is down so we can react call the right function\n      // if the user is clicking on a link.\n      mouseEventStarted.current = true;\n    } else {\n      event.preventDefault();\n    }\n  }\n\n  function handleMouseEnter(event) {\n    if (!isSelected && index != null) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: index\n        }\n      });\n    }\n  }\n\n  function handleMouseLeave(event) {\n    // Clear out selection when mouse over a non-menu item child.\n    dispatch({\n      type: CLEAR_SELECTION_INDEX\n    });\n  }\n\n  function handleMouseMove(event) {\n    if (!isSelected && index != null) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: index\n        }\n      });\n    }\n  }\n\n  function handleMouseUp(event) {\n    if (isRightClick(event.nativeEvent)) return;\n\n    if (isLink) {\n      // If a mousedown event was initiated on a menu link followed by a\n      // mouseup event on the same link, we do nothing; a click event will\n      // come next and handle selection. Otherwise, we trigger a click event.\n      if (mouseEventStarted.current) {\n        mouseEventStarted.current = false;\n      } else if (ownRef.current) {\n        ownRef.current.click();\n      }\n    } else {\n      select();\n    }\n  } // Any time a mouseup event occurs anywhere in the document, we reset the\n  // mouseEventStarted ref so we can check it again when needed.\n\n\n  useEffect(function () {\n    var ownerDocument = getOwnerDocument(ownRef.current) || document;\n\n    var listener = function listener() {\n      return mouseEventStarted.current = false;\n    };\n\n    ownerDocument.addEventListener(\"mouseup\", listener);\n    return function () {\n      return ownerDocument.removeEventListener(\"mouseup\", listener);\n    };\n  }, []);\n  return React.createElement(Comp, Object.assign({\n    role: \"menuitem\",\n    id: useMenuItemId(index),\n    tabIndex: -1\n  }, props, {\n    ref: ref,\n    \"data-reach-menu-item\": \"\",\n    \"data-selected\": isSelected ? \"\" : undefined,\n    \"data-valuetext\": valueText,\n    onClick: wrapEvent(onClick, handleClick),\n    onDragStart: wrapEvent(onDragStart, handleDragStart),\n    onMouseDown: wrapEvent(onMouseDown, handleMouseDown),\n    onMouseEnter: wrapEvent(onMouseEnter, handleMouseEnter),\n    onMouseLeave: wrapEvent(onMouseLeave, handleMouseLeave),\n    onMouseMove: wrapEvent(onMouseMove, handleMouseMove),\n    onMouseUp: wrapEvent(onMouseUp, handleMouseUp)\n  }));\n}); ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuItem\r\n *\r\n * Handles menu selection. Must be a direct child of a `<MenuList>`.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitem\r\n */\n\nvar MenuItem =\n/*#__PURE__*/\nforwardRefWithAs(function MenuItem(_ref4, forwardedRef) {\n  var _ref4$as = _ref4.as,\n      as = _ref4$as === void 0 ? \"div\" : _ref4$as,\n      props = _objectWithoutPropertiesLoose(_ref4, [\"as\"]);\n\n  return React.createElement(MenuItemImpl, Object.assign({}, props, {\n    ref: forwardedRef,\n    as: as\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuItem.displayName = \"MenuItem\";\n  MenuItem.propTypes = {\n    as: PropTypes.any,\n    onSelect: PropTypes.func.isRequired\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuItems\r\n *\r\n * A low-level wrapper for menu items. Compose it with `MenuPopover` for more\r\n * control over the nested components and their rendered DOM nodes, or if you\r\n * need to nest arbitrary components between the outer wrapper and your list.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitems\r\n */\n\n\nvar MenuItems =\n/*#__PURE__*/\nforwardRefWithAs(function MenuItems(_ref5, forwardedRef) {\n  var _ref5$as = _ref5.as,\n      Comp = _ref5$as === void 0 ? \"div\" : _ref5$as,\n      children = _ref5.children,\n      id = _ref5.id,\n      onKeyDown = _ref5.onKeyDown,\n      props = _objectWithoutPropertiesLoose(_ref5, [\"as\", \"children\", \"id\", \"onKeyDown\"]);\n\n  var _useContext3 = useContext(MenuContext),\n      menuId = _useContext3.menuId,\n      dispatch = _useContext3.dispatch,\n      buttonRef = _useContext3.buttonRef,\n      menuRef = _useContext3.menuRef,\n      selectCallbacks = _useContext3.selectCallbacks,\n      _useContext3$state = _useContext3.state,\n      isExpanded = _useContext3$state.isExpanded,\n      buttonId = _useContext3$state.buttonId,\n      selectionIndex = _useContext3$state.selectionIndex,\n      typeaheadQuery = _useContext3$state.typeaheadQuery;\n\n  var _useContext4 = useContext(MenuDescendantContext),\n      menuItems = _useContext4.descendants;\n\n  var ref = useForkedRef(menuRef, forwardedRef);\n  useEffect(function () {\n    // Respond to user char key input with typeahead\n    var match = findItemFromTypeahead(menuItems, typeaheadQuery);\n\n    if (typeaheadQuery && match != null) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: match\n        }\n      });\n    }\n\n    var timeout = window.setTimeout(function () {\n      return typeaheadQuery && dispatch({\n        type: SEARCH_FOR_ITEM,\n        payload: \"\"\n      });\n    }, 1000);\n    return function () {\n      return window.clearTimeout(timeout);\n    };\n  }, [dispatch, menuItems, typeaheadQuery]);\n  var prevMenuItemsLength = usePrevious(menuItems.length);\n  var prevSelected = usePrevious(menuItems[selectionIndex]);\n  var prevSelectionIndex = usePrevious(selectionIndex);\n  useEffect(function () {\n    if (selectionIndex > menuItems.length - 1) {\n      // If for some reason our selection index is larger than our possible\n      // index range (let's say the last item is selected and the list\n      // dynamically updates), we need to select the last item in the list.\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: menuItems.length - 1\n        }\n      });\n    } else if ( // Checks if\n    //  - menu length has changed\n    //  - selection index has not changed BUT selected item has changed\n    //\n    // This prevents any dynamic adding/removing of menu items from actually\n    // changing a user's expected selection.\n    prevMenuItemsLength !== menuItems.length && selectionIndex > -1 && prevSelected && prevSelectionIndex === selectionIndex && menuItems[selectionIndex] !== prevSelected) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: menuItems.findIndex(function (i) {\n            return i.key === prevSelected.key;\n          })\n        }\n      });\n    }\n  }, [dispatch, menuItems, prevMenuItemsLength, prevSelected, prevSelectionIndex, selectionIndex]);\n  var handleKeyDown = wrapEvent(function handleKeyDown(event) {\n    var key = event.key;\n\n    if (!isExpanded) {\n      return;\n    }\n\n    switch (key) {\n      case \"Enter\":\n      case \" \":\n        var selected = menuItems.find(function (item) {\n          return item.index === selectionIndex;\n        }); // For links, the Enter key will trigger a click by default, but for\n        // consistent behavior across menu items we'll trigger a click when\n        // the spacebar is pressed.\n\n        if (selected) {\n          if (selected.isLink && selected.element) {\n            selected.element.click();\n          } else {\n            event.preventDefault(); // Focus the button first by default when an item is selected.\n            // We fire the onSelect callback next so the app can manage\n            // focus if needed.\n\n            focus(buttonRef.current);\n            selectCallbacks.current[selected.index] && selectCallbacks.current[selected.index]();\n            dispatch({\n              type: CLICK_MENU_ITEM\n            });\n          }\n        }\n\n        break;\n\n      case \"Escape\":\n        focus(buttonRef.current);\n        dispatch({\n          type: CLOSE_MENU,\n          payload: {\n            buttonRef: buttonRef\n          }\n        });\n        break;\n\n      case \"Tab\":\n        // prevent leaving\n        event.preventDefault();\n        break;\n\n      default:\n        // Check if a user is typing some char keys and respond by setting\n        // the query state.\n        if (isString(key) && key.length === 1) {\n          var query = typeaheadQuery + key.toLowerCase();\n          dispatch({\n            type: SEARCH_FOR_ITEM,\n            payload: query\n          });\n        }\n\n        break;\n    }\n  }, useDescendantKeyDown(MenuDescendantContext, {\n    currentIndex: selectionIndex,\n    orientation: \"vertical\",\n    rotate: false,\n    callback: function callback(index) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: index\n        }\n      });\n    },\n    key: \"index\"\n  }));\n  return (// TODO: Should probably file a but in jsx-a11y, but this is correct\n    // according to https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n    // eslint-disable-next-line jsx-a11y/aria-activedescendant-has-tabindex\n    React.createElement(Comp // Refers to the descendant menuitem element that is visually indicated\n    // as focused.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n    , Object.assign({\n      \"aria-activedescendant\": useMenuItemId(selectionIndex) || undefined,\n      \"aria-labelledby\": buttonId || undefined,\n      // The element that contains the menu items displayed by activating the\n      // button has role menu.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n      role: \"menu\",\n      tabIndex: -1\n    }, props, {\n      ref: ref,\n      \"data-reach-menu-items\": \"\",\n      id: menuId,\n      onKeyDown: wrapEvent(onKeyDown, handleKeyDown)\n    }), children)\n  );\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuItems.displayName = \"MenuItems\";\n  MenuItems.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuLink\r\n *\r\n * Handles linking to a different page in the menu. By default it renders `<a>`,\r\n * but also accepts any other kind of Link as long as the `Link` uses the\r\n * `React.forwardRef` API.\r\n *\r\n * Must be a direct child of a `<MenuList>`.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menulink\r\n */\n\n\nvar MenuLink =\n/*#__PURE__*/\nforwardRefWithAs(function MenuLink(_ref6, forwardedRef) {\n  var _ref6$as = _ref6.as,\n      as = _ref6$as === void 0 ? \"a\" : _ref6$as,\n      component = _ref6.component,\n      onSelect = _ref6.onSelect,\n      props = _objectWithoutPropertiesLoose(_ref6, [\"as\", \"component\", \"onSelect\"]);\n\n  if (component) {\n    console.warn(\"[@reach/menu-button]: Please use the `as` prop instead of `component`.\");\n  }\n\n  return React.createElement(\"div\", {\n    role: \"none\",\n    tabIndex: -1\n  }, React.createElement(MenuItemImpl, Object.assign({}, props, {\n    ref: forwardedRef,\n    \"data-reach-menu-link\": \"\",\n    as: as,\n    isLink: true,\n    onSelect: onSelect || noop\n  })));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuLink.displayName = \"MenuLink\";\n  MenuLink.propTypes = {\n    as: PropTypes.any,\n    component: PropTypes.any\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuList\r\n *\r\n * Wraps a DOM element that renders the menu items. Must be rendered inside of\r\n * a `<Menu>`.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menulist\r\n */\n\n\nvar MenuList =\n/*#__PURE__*/\nforwardRef(function MenuList(_ref7, forwardedRef) {\n  var _ref7$portal = _ref7.portal,\n      portal = _ref7$portal === void 0 ? true : _ref7$portal,\n      props = _objectWithoutPropertiesLoose(_ref7, [\"portal\"]);\n\n  return React.createElement(MenuPopover, {\n    portal: portal\n  }, React.createElement(MenuItems, Object.assign({}, props, {\n    ref: forwardedRef,\n    \"data-reach-menu-list\": \"\"\n  })));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuList.displayName = \"MenuList\";\n  MenuList.propTypes = {\n    children: PropTypes.node.isRequired\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuPopover\r\n *\r\n * A low-level wrapper for the popover that appears when a menu button is open.\r\n * You can compose it with `MenuItems` for more control over the nested\r\n * components and their rendered DOM nodes, or if you need to nest arbitrary\r\n * components between the outer wrapper and your list.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menupopover\r\n */\n\n\nvar MenuPopover =\n/*#__PURE__*/\nforwardRef(function MenuPopover(_ref8, forwardedRef) {\n  var children = _ref8.children,\n      _ref8$portal = _ref8.portal,\n      portal = _ref8$portal === void 0 ? true : _ref8$portal,\n      position = _ref8.position,\n      props = _objectWithoutPropertiesLoose(_ref8, [\"children\", \"portal\", \"position\"]);\n\n  var _useContext5 = useContext(MenuContext),\n      buttonRef = _useContext5.buttonRef,\n      buttonClickedRef = _useContext5.buttonClickedRef,\n      dispatch = _useContext5.dispatch,\n      menuRef = _useContext5.menuRef,\n      popoverRef = _useContext5.popoverRef,\n      isExpanded = _useContext5.state.isExpanded;\n\n  var ref = useForkedRef(popoverRef, forwardedRef);\n  useEffect(function () {\n    function listener(event) {\n      if (buttonClickedRef.current) {\n        buttonClickedRef.current = false;\n      } else {\n        var relatedTarget = event.relatedTarget,\n            target = event.target; // We on want to close only if focus rests outside the menu\n\n        if (isExpanded && popoverRef.current) {\n          var _popoverRef$current;\n\n          if (!((_popoverRef$current = popoverRef.current) === null || _popoverRef$current === void 0 ? void 0 : _popoverRef$current.contains(relatedTarget || target))) {\n            dispatch({\n              type: CLOSE_MENU,\n              payload: {\n                buttonRef: buttonRef\n              }\n            });\n          }\n        }\n      }\n    }\n\n    window.addEventListener(\"mousedown\", listener);\n    return function () {\n      window.removeEventListener(\"mousedown\", listener);\n    };\n  }, [buttonClickedRef, buttonRef, dispatch, isExpanded, menuRef, popoverRef]);\n\n  var commonProps = _extends({\n    ref: ref,\n    // TODO: remove in 1.0\n    \"data-reach-menu\": \"\",\n    \"data-reach-menu-popover\": \"\",\n    hidden: !isExpanded,\n    children: children\n  }, props);\n\n  return portal ? React.createElement(Popover, Object.assign({}, commonProps, {\n    targetRef: buttonRef,\n    position: position\n  })) : React.createElement(\"div\", Object.assign({}, commonProps));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuPopover.displayName = \"MenuPopover\";\n  MenuPopover.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * A hook that exposes data for a given `Menu` component to its descendants.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#usemenubuttoncontext\r\n */\n\n\nfunction useMenuButtonContext() {\n  var _useContext6 = useContext(MenuContext),\n      isExpanded = _useContext6.state.isExpanded;\n\n  return useMemo(function () {\n    return {\n      isExpanded: isExpanded\n    };\n  }, [isExpanded]);\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * When a user's typed input matches the string displayed in a menu item, it is\r\n * expected that the matching menu item is selected. This is our matching\r\n * function.\r\n */\n\n\nfunction findItemFromTypeahead(items, string) {\n  if (string === void 0) {\n    string = \"\";\n  }\n\n  if (!string) {\n    return null;\n  }\n\n  var found = items.find(function (_ref9) {\n    var _element$dataset, _element$dataset$valu;\n\n    var element = _ref9.element;\n    return element === null || element === void 0 ? void 0 : (_element$dataset = element.dataset) === null || _element$dataset === void 0 ? void 0 : (_element$dataset$valu = _element$dataset.valuetext) === null || _element$dataset$valu === void 0 ? void 0 : _element$dataset$valu.toLowerCase().startsWith(string);\n  });\n  return found ? items.indexOf(found) : null;\n}\n\nfunction useMenuItemId(index) {\n  var _useContext7 = useContext(MenuContext),\n      menuId = _useContext7.menuId;\n\n  return index != null && index > -1 ? makeId(\"option-\" + index, menuId) : undefined;\n}\n\nfunction isRightClick(nativeEvent) {\n  return nativeEvent.which === 3 || nativeEvent.button === 2;\n}\n\nfunction focus(element) {\n  element && element.focus();\n}\n\nfunction reducer(state, action) {\n  if (action === void 0) {\n    action = {};\n  }\n\n  switch (action.type) {\n    case CLICK_MENU_ITEM:\n      return _extends({}, state, {\n        isExpanded: false,\n        selectionIndex: -1\n      });\n\n    case CLOSE_MENU:\n      return _extends({}, state, {\n        isExpanded: false,\n        selectionIndex: -1\n      });\n\n    case OPEN_MENU_AT_FIRST_ITEM:\n      return _extends({}, state, {\n        isExpanded: true,\n        selectionIndex: 0\n      });\n\n    case OPEN_MENU_CLEARED:\n      return _extends({}, state, {\n        isExpanded: true,\n        selectionIndex: -1\n      });\n\n    case SELECT_ITEM_AT_INDEX:\n      if (action.payload.index >= 0) {\n        return _extends({}, state, {\n          selectionIndex: action.payload.max != null ? Math.min(Math.max(action.payload.index, 0), action.payload.max) : Math.max(action.payload.index, 0)\n        });\n      }\n\n      return state;\n\n    case CLEAR_SELECTION_INDEX:\n      return _extends({}, state, {\n        selectionIndex: -1\n      });\n\n    case SET_BUTTON_ID:\n      return _extends({}, state, {\n        buttonId: action.payload\n      });\n\n    case SEARCH_FOR_ITEM:\n      if (typeof action.payload !== \"undefined\") {\n        return _extends({}, state, {\n          typeaheadQuery: action.payload\n        });\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport { Menu, MenuButton, MenuItem, MenuItems, MenuLink, MenuList, MenuPopover, useMenuButtonContext };","map":null,"metadata":{},"sourceType":"module"}