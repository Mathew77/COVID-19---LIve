{"ast":null,"code":"import React, { useRef, useReducer, useEffect, useContext, forwardRef, useMemo, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useId } from '@reach/auto-id';\nimport Popover from '@reach/popover';\nimport { useDescendants, DescendantProvider, useDescendantKeyDown, createDescendantContext, useDescendant } from '@reach/descendants';\nimport { makeId, checkStyles, isFunction, forwardRefWithAs, useForkedRef, wrapEvent, usePrevious, isString, noop, createNamedContext, getOwnerDocument } from '@reach/utils';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} // Actions\n\n\nvar CLEAR_SELECTION_INDEX = \"CLEAR_SELECTION_INDEX\";\nvar CLICK_MENU_ITEM = \"CLICK_MENU_ITEM\";\nvar CLOSE_MENU = \"CLOSE_MENU\";\nvar OPEN_MENU_AT_FIRST_ITEM = \"OPEN_MENU_AT_FIRST_ITEM\";\nvar OPEN_MENU_CLEARED = \"OPEN_MENU_CLEARED\";\nvar SEARCH_FOR_ITEM = \"SEARCH_FOR_ITEM\";\nvar SELECT_ITEM_AT_INDEX = \"SELECT_ITEM_AT_INDEX\";\nvar SET_BUTTON_ID = \"SET_BUTTON_ID\";\nvar MenuDescendantContext = /*#__PURE__*/createDescendantContext(\"MenuDescendantContext\");\nvar MenuContext = /*#__PURE__*/createNamedContext(\"MenuContext\", {});\nvar initialState = {\n  // The button ID is needed for aria controls and can be set directly and\n  // updated for top-level use via context. Otherwise a default is set by useId.\n  // TODO: Consider deprecating direct ID in 1.0 in favor of id at the top level\n  //       for passing deterministic IDs to descendent components.\n  buttonId: null,\n  // Whether or not the menu is expanded\n  isExpanded: false,\n  // When a user begins typing a character string, the selection will change if\n  // a matching item is found\n  typeaheadQuery: \"\",\n  // The index of the current selected item. When the selection is cleared a\n  // value of -1 is used.\n  selectionIndex: -1\n}; ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Menu\r\n *\r\n * The wrapper component for the other components. No DOM element is rendered.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menu\r\n */\n\nvar Menu = function Menu(_ref) {\n  var id = _ref.id,\n      children = _ref.children;\n  var buttonRef = useRef(null);\n  var menuRef = useRef(null);\n  var popoverRef = useRef(null);\n\n  var _useDescendants = useDescendants(),\n      descendants = _useDescendants[0],\n      setDescendants = _useDescendants[1];\n\n  var _useReducer = useReducer(reducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var _id = useId(id);\n\n  var menuId = id || makeId(\"menu\", _id); // We use an event listener attached to the window to capture outside clicks\n  // that close the menu. We don't want the initial button click to trigger this\n  // when a menu is closed, so we can track this behavior in a ref for now.\n  // We shouldn't need this when we rewrite with state machine logic.\n\n  var buttonClickedRef = useRef(false); // We will put children callbacks in a ref to avoid triggering endless render\n  // loops when using render props if the app code doesn't useCallback\n  // https://github.com/reach/reach-ui/issues/523\n\n  var selectCallbacks = useRef([]);\n  var context = {\n    buttonRef: buttonRef,\n    dispatch: dispatch,\n    menuId: menuId,\n    menuRef: menuRef,\n    popoverRef: popoverRef,\n    buttonClickedRef: buttonClickedRef,\n    selectCallbacks: selectCallbacks,\n    state: state\n  }; // When the menu is open, focus is placed on the menu itself so that\n  // keyboard navigation is still possible.\n\n  useEffect(function () {\n    if (state.isExpanded) {\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = true;\n      window.requestAnimationFrame(function () {\n        focus(menuRef.current);\n      });\n    } else {\n      // We want to ignore the immediate focus of a tooltip so it doesn't pop\n      // up again when the menu closes, only pops up when focus returns again\n      // to the tooltip (like native OS tooltips).\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = false;\n    }\n  }, [state.isExpanded]);\n  useEffect(function () {\n    return checkStyles(\"menu-button\");\n  }, []);\n  return React.createElement(DescendantProvider, {\n    context: MenuDescendantContext,\n    items: descendants,\n    set: setDescendants\n  }, React.createElement(MenuContext.Provider, {\n    value: context\n  }, isFunction(children) ? children({\n    isExpanded: state.isExpanded,\n    // TODO: Remove in 1.0\n    isOpen: state.isExpanded\n  }) : children));\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  Menu.displayName = \"Menu\";\n  Menu.propTypes = {\n    children: /*#__PURE__*/PropTypes.oneOfType([PropTypes.func, PropTypes.node])\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuButton\r\n *\r\n * Wraps a DOM `button` that toggles the opening and closing of the dropdown\r\n * menu. Must be rendered inside of a `<Menu>`.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menubutton\r\n */\n\n\nvar MenuButton = /*#__PURE__*/forwardRefWithAs(function MenuButton(_ref2, forwardedRef) {\n  var _ref2$as = _ref2.as,\n      Comp = _ref2$as === void 0 ? \"button\" : _ref2$as,\n      onKeyDown = _ref2.onKeyDown,\n      onMouseDown = _ref2.onMouseDown,\n      id = _ref2.id,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"as\", \"onKeyDown\", \"onMouseDown\", \"id\"]);\n\n  var _useContext = useContext(MenuContext),\n      buttonRef = _useContext.buttonRef,\n      buttonClickedRef = _useContext.buttonClickedRef,\n      menuId = _useContext.menuId,\n      _useContext$state = _useContext.state,\n      buttonId = _useContext$state.buttonId,\n      isExpanded = _useContext$state.isExpanded,\n      dispatch = _useContext.dispatch;\n\n  var ref = useForkedRef(buttonRef, forwardedRef);\n  useEffect(function () {\n    var newButtonId = id != null ? id : menuId ? makeId(\"menu-button\", menuId) : \"menu-button\";\n\n    if (buttonId !== newButtonId) {\n      dispatch({\n        type: SET_BUTTON_ID,\n        payload: newButtonId\n      });\n    }\n  }, [buttonId, dispatch, id, menuId]);\n\n  function handleKeyDown(event) {\n    switch (event.key) {\n      case \"ArrowDown\":\n      case \"ArrowUp\":\n        event.preventDefault(); // prevent scroll\n\n        dispatch({\n          type: OPEN_MENU_AT_FIRST_ITEM\n        });\n        break;\n\n      case \"Enter\":\n      case \" \":\n        dispatch({\n          type: OPEN_MENU_AT_FIRST_ITEM\n        });\n        break;\n    }\n  }\n\n  function handleMouseDown(event) {\n    if (!isExpanded) {\n      buttonClickedRef.current = true;\n    }\n\n    if (isRightClick(event.nativeEvent)) {\n      return;\n    } else if (isExpanded) {\n      dispatch({\n        type: CLOSE_MENU,\n        payload: {\n          buttonRef: buttonRef\n        }\n      });\n    } else {\n      dispatch({\n        type: OPEN_MENU_CLEARED\n      });\n    }\n  }\n\n  return React.createElement(Comp // When the menu is displayed, the element with role `button` has\n  // `aria-expanded` set to `true`. When the menu is hidden, it is\n  // recommended that `aria-expanded` is not present.\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n  , Object.assign({\n    \"aria-expanded\": isExpanded ? true : undefined,\n    \"aria-haspopup\": true,\n    \"aria-controls\": menuId\n  }, props, {\n    ref: ref,\n    \"data-reach-menu-button\": \"\",\n    id: buttonId || undefined,\n    onKeyDown: wrapEvent(onKeyDown, handleKeyDown),\n    onMouseDown: wrapEvent(onMouseDown, handleMouseDown),\n    type: \"button\"\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuButton.displayName = \"MenuButton\";\n  MenuButton.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuItemImpl\r\n *\r\n * MenuItem and MenuLink share most of the same functionality captured here.\r\n */\n\n\nvar MenuItemImpl = /*#__PURE__*/forwardRefWithAs(function MenuItemImpl(_ref3, forwardedRef) {\n  var Comp = _ref3.as,\n      indexProp = _ref3.index,\n      _ref3$isLink = _ref3.isLink,\n      isLink = _ref3$isLink === void 0 ? false : _ref3$isLink,\n      onClick = _ref3.onClick,\n      onDragStart = _ref3.onDragStart,\n      onMouseDown = _ref3.onMouseDown,\n      onMouseEnter = _ref3.onMouseEnter,\n      onMouseLeave = _ref3.onMouseLeave,\n      onMouseMove = _ref3.onMouseMove,\n      onMouseUp = _ref3.onMouseUp,\n      onSelect = _ref3.onSelect,\n      valueTextProp = _ref3.valueText,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"as\", \"index\", \"isLink\", \"onClick\", \"onDragStart\", \"onMouseDown\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseMove\", \"onMouseUp\", \"onSelect\", \"valueText\"]);\n\n  var _useContext2 = useContext(MenuContext),\n      buttonRef = _useContext2.buttonRef,\n      dispatch = _useContext2.dispatch,\n      selectCallbacks = _useContext2.selectCallbacks,\n      selectionIndex = _useContext2.state.selectionIndex;\n\n  var ownRef = useRef(null); // After the ref is mounted to the DOM node, we check to see if we have an\n  // explicit valueText prop before looking for the node's textContent for\n  // typeahead functionality.\n\n  var _useState = useState(valueTextProp || \"\"),\n      valueText = _useState[0],\n      setValueText = _useState[1];\n\n  var setValueTextFromDom = useCallback(function (node) {\n    if (node) {\n      ownRef.current = node;\n\n      if (!valueTextProp || node.textContent && valueText !== node.textContent) {\n        setValueText(node.textContent);\n      }\n    }\n  }, [valueText, valueTextProp]);\n  var ref = useForkedRef(forwardedRef, setValueTextFromDom);\n  var mouseEventStarted = useRef(false);\n  var index = useDescendant({\n    context: MenuDescendantContext,\n    element: ownRef.current,\n    key: valueText,\n    isLink: isLink\n  }, indexProp);\n  var isSelected = index === selectionIndex; // Update the callback ref array on every render\n\n  selectCallbacks.current[index] = onSelect;\n\n  function select() {\n    focus(buttonRef.current);\n    onSelect && onSelect();\n    dispatch({\n      type: CLICK_MENU_ITEM\n    });\n  }\n\n  function handleClick(event) {\n    if (isLink && !isRightClick(event.nativeEvent)) {\n      select();\n    }\n  }\n\n  function handleDragStart(event) {\n    // Because we don't preventDefault on mousedown for links (we need the\n    // native click event), clicking and holding on a link triggers a\n    // dragstart which we don't want.\n    if (isLink) {\n      event.preventDefault();\n    }\n  }\n\n  function handleMouseDown(event) {\n    if (isRightClick(event.nativeEvent)) return;\n\n    if (isLink) {\n      // Signal that the mouse is down so we can react call the right function\n      // if the user is clicking on a link.\n      mouseEventStarted.current = true;\n    } else {\n      event.preventDefault();\n    }\n  }\n\n  function handleMouseEnter(event) {\n    if (!isSelected && index != null) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: index\n        }\n      });\n    }\n  }\n\n  function handleMouseLeave(event) {\n    // Clear out selection when mouse over a non-menu item child.\n    dispatch({\n      type: CLEAR_SELECTION_INDEX\n    });\n  }\n\n  function handleMouseMove(event) {\n    if (!isSelected && index != null) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: index\n        }\n      });\n    }\n  }\n\n  function handleMouseUp(event) {\n    if (isRightClick(event.nativeEvent)) return;\n\n    if (isLink) {\n      // If a mousedown event was initiated on a menu link followed by a\n      // mouseup event on the same link, we do nothing; a click event will\n      // come next and handle selection. Otherwise, we trigger a click event.\n      if (mouseEventStarted.current) {\n        mouseEventStarted.current = false;\n      } else if (ownRef.current) {\n        ownRef.current.click();\n      }\n    } else {\n      select();\n    }\n  } // Any time a mouseup event occurs anywhere in the document, we reset the\n  // mouseEventStarted ref so we can check it again when needed.\n\n\n  useEffect(function () {\n    var ownerDocument = getOwnerDocument(ownRef.current) || document;\n\n    var listener = function listener() {\n      return mouseEventStarted.current = false;\n    };\n\n    ownerDocument.addEventListener(\"mouseup\", listener);\n    return function () {\n      return ownerDocument.removeEventListener(\"mouseup\", listener);\n    };\n  }, []);\n  return React.createElement(Comp, Object.assign({\n    role: \"menuitem\",\n    id: useMenuItemId(index),\n    tabIndex: -1\n  }, props, {\n    ref: ref,\n    \"data-reach-menu-item\": \"\",\n    \"data-selected\": isSelected ? \"\" : undefined,\n    \"data-valuetext\": valueText,\n    onClick: wrapEvent(onClick, handleClick),\n    onDragStart: wrapEvent(onDragStart, handleDragStart),\n    onMouseDown: wrapEvent(onMouseDown, handleMouseDown),\n    onMouseEnter: wrapEvent(onMouseEnter, handleMouseEnter),\n    onMouseLeave: wrapEvent(onMouseLeave, handleMouseLeave),\n    onMouseMove: wrapEvent(onMouseMove, handleMouseMove),\n    onMouseUp: wrapEvent(onMouseUp, handleMouseUp)\n  }));\n}); ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuItem\r\n *\r\n * Handles menu selection. Must be a direct child of a `<MenuList>`.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitem\r\n */\n\nvar MenuItem = /*#__PURE__*/forwardRefWithAs(function MenuItem(_ref4, forwardedRef) {\n  var _ref4$as = _ref4.as,\n      as = _ref4$as === void 0 ? \"div\" : _ref4$as,\n      props = _objectWithoutPropertiesLoose(_ref4, [\"as\"]);\n\n  return React.createElement(MenuItemImpl, Object.assign({}, props, {\n    ref: forwardedRef,\n    as: as\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuItem.displayName = \"MenuItem\";\n  MenuItem.propTypes = {\n    as: PropTypes.any,\n    onSelect: PropTypes.func.isRequired\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuItems\r\n *\r\n * A low-level wrapper for menu items. Compose it with `MenuPopover` for more\r\n * control over the nested components and their rendered DOM nodes, or if you\r\n * need to nest arbitrary components between the outer wrapper and your list.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitems\r\n */\n\n\nvar MenuItems = /*#__PURE__*/forwardRefWithAs(function MenuItems(_ref5, forwardedRef) {\n  var _ref5$as = _ref5.as,\n      Comp = _ref5$as === void 0 ? \"div\" : _ref5$as,\n      children = _ref5.children,\n      id = _ref5.id,\n      onKeyDown = _ref5.onKeyDown,\n      props = _objectWithoutPropertiesLoose(_ref5, [\"as\", \"children\", \"id\", \"onKeyDown\"]);\n\n  var _useContext3 = useContext(MenuContext),\n      menuId = _useContext3.menuId,\n      dispatch = _useContext3.dispatch,\n      buttonRef = _useContext3.buttonRef,\n      menuRef = _useContext3.menuRef,\n      selectCallbacks = _useContext3.selectCallbacks,\n      _useContext3$state = _useContext3.state,\n      isExpanded = _useContext3$state.isExpanded,\n      buttonId = _useContext3$state.buttonId,\n      selectionIndex = _useContext3$state.selectionIndex,\n      typeaheadQuery = _useContext3$state.typeaheadQuery;\n\n  var _useContext4 = useContext(MenuDescendantContext),\n      menuItems = _useContext4.descendants;\n\n  var ref = useForkedRef(menuRef, forwardedRef);\n  useEffect(function () {\n    // Respond to user char key input with typeahead\n    var match = findItemFromTypeahead(menuItems, typeaheadQuery);\n\n    if (typeaheadQuery && match != null) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: match\n        }\n      });\n    }\n\n    var timeout = window.setTimeout(function () {\n      return typeaheadQuery && dispatch({\n        type: SEARCH_FOR_ITEM,\n        payload: \"\"\n      });\n    }, 1000);\n    return function () {\n      return window.clearTimeout(timeout);\n    };\n  }, [dispatch, menuItems, typeaheadQuery]);\n  var prevMenuItemsLength = usePrevious(menuItems.length);\n  var prevSelected = usePrevious(menuItems[selectionIndex]);\n  var prevSelectionIndex = usePrevious(selectionIndex);\n  useEffect(function () {\n    if (selectionIndex > menuItems.length - 1) {\n      // If for some reason our selection index is larger than our possible\n      // index range (let's say the last item is selected and the list\n      // dynamically updates), we need to select the last item in the list.\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: menuItems.length - 1\n        }\n      });\n    } else if ( // Checks if\n    //  - menu length has changed\n    //  - selection index has not changed BUT selected item has changed\n    //\n    // This prevents any dynamic adding/removing of menu items from actually\n    // changing a user's expected selection.\n    prevMenuItemsLength !== menuItems.length && selectionIndex > -1 && prevSelected && prevSelectionIndex === selectionIndex && menuItems[selectionIndex] !== prevSelected) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: menuItems.findIndex(function (i) {\n            return i.key === prevSelected.key;\n          })\n        }\n      });\n    }\n  }, [dispatch, menuItems, prevMenuItemsLength, prevSelected, prevSelectionIndex, selectionIndex]);\n  var handleKeyDown = wrapEvent(function handleKeyDown(event) {\n    var key = event.key;\n\n    if (!isExpanded) {\n      return;\n    }\n\n    switch (key) {\n      case \"Enter\":\n      case \" \":\n        var selected = menuItems.find(function (item) {\n          return item.index === selectionIndex;\n        }); // For links, the Enter key will trigger a click by default, but for\n        // consistent behavior across menu items we'll trigger a click when\n        // the spacebar is pressed.\n\n        if (selected) {\n          if (selected.isLink && selected.element) {\n            selected.element.click();\n          } else {\n            event.preventDefault(); // Focus the button first by default when an item is selected.\n            // We fire the onSelect callback next so the app can manage\n            // focus if needed.\n\n            focus(buttonRef.current);\n            selectCallbacks.current[selected.index] && selectCallbacks.current[selected.index]();\n            dispatch({\n              type: CLICK_MENU_ITEM\n            });\n          }\n        }\n\n        break;\n\n      case \"Escape\":\n        focus(buttonRef.current);\n        dispatch({\n          type: CLOSE_MENU,\n          payload: {\n            buttonRef: buttonRef\n          }\n        });\n        break;\n\n      case \"Tab\":\n        // prevent leaving\n        event.preventDefault();\n        break;\n\n      default:\n        // Check if a user is typing some char keys and respond by setting\n        // the query state.\n        if (isString(key) && key.length === 1) {\n          var query = typeaheadQuery + key.toLowerCase();\n          dispatch({\n            type: SEARCH_FOR_ITEM,\n            payload: query\n          });\n        }\n\n        break;\n    }\n  }, useDescendantKeyDown(MenuDescendantContext, {\n    currentIndex: selectionIndex,\n    orientation: \"vertical\",\n    rotate: false,\n    callback: function callback(index) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: index\n        }\n      });\n    },\n    key: \"index\"\n  }));\n  return (// TODO: Should probably file a but in jsx-a11y, but this is correct\n    // according to https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n    // eslint-disable-next-line jsx-a11y/aria-activedescendant-has-tabindex\n    React.createElement(Comp // Refers to the descendant menuitem element that is visually indicated\n    // as focused.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n    , Object.assign({\n      \"aria-activedescendant\": useMenuItemId(selectionIndex) || undefined,\n      \"aria-labelledby\": buttonId || undefined,\n      // The element that contains the menu items displayed by activating the\n      // button has role menu.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n      role: \"menu\",\n      tabIndex: -1\n    }, props, {\n      ref: ref,\n      \"data-reach-menu-items\": \"\",\n      id: menuId,\n      onKeyDown: wrapEvent(onKeyDown, handleKeyDown)\n    }), children)\n  );\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuItems.displayName = \"MenuItems\";\n  MenuItems.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuLink\r\n *\r\n * Handles linking to a different page in the menu. By default it renders `<a>`,\r\n * but also accepts any other kind of Link as long as the `Link` uses the\r\n * `React.forwardRef` API.\r\n *\r\n * Must be a direct child of a `<MenuList>`.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menulink\r\n */\n\n\nvar MenuLink = /*#__PURE__*/forwardRefWithAs(function MenuLink(_ref6, forwardedRef) {\n  var _ref6$as = _ref6.as,\n      as = _ref6$as === void 0 ? \"a\" : _ref6$as,\n      component = _ref6.component,\n      onSelect = _ref6.onSelect,\n      props = _objectWithoutPropertiesLoose(_ref6, [\"as\", \"component\", \"onSelect\"]);\n\n  if (component) {\n    console.warn(\"[@reach/menu-button]: Please use the `as` prop instead of `component`.\");\n  }\n\n  return React.createElement(\"div\", {\n    role: \"none\",\n    tabIndex: -1\n  }, React.createElement(MenuItemImpl, Object.assign({}, props, {\n    ref: forwardedRef,\n    \"data-reach-menu-link\": \"\",\n    as: as,\n    isLink: true,\n    onSelect: onSelect || noop\n  })));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuLink.displayName = \"MenuLink\";\n  MenuLink.propTypes = {\n    as: PropTypes.any,\n    component: PropTypes.any\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuList\r\n *\r\n * Wraps a DOM element that renders the menu items. Must be rendered inside of\r\n * a `<Menu>`.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menulist\r\n */\n\n\nvar MenuList = /*#__PURE__*/forwardRef(function MenuList(_ref7, forwardedRef) {\n  var _ref7$portal = _ref7.portal,\n      portal = _ref7$portal === void 0 ? true : _ref7$portal,\n      props = _objectWithoutPropertiesLoose(_ref7, [\"portal\"]);\n\n  return React.createElement(MenuPopover, {\n    portal: portal\n  }, React.createElement(MenuItems, Object.assign({}, props, {\n    ref: forwardedRef,\n    \"data-reach-menu-list\": \"\"\n  })));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuList.displayName = \"MenuList\";\n  MenuList.propTypes = {\n    children: PropTypes.node.isRequired\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * MenuPopover\r\n *\r\n * A low-level wrapper for the popover that appears when a menu button is open.\r\n * You can compose it with `MenuItems` for more control over the nested\r\n * components and their rendered DOM nodes, or if you need to nest arbitrary\r\n * components between the outer wrapper and your list.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menupopover\r\n */\n\n\nvar MenuPopover = /*#__PURE__*/forwardRef(function MenuPopover(_ref8, forwardedRef) {\n  var children = _ref8.children,\n      _ref8$portal = _ref8.portal,\n      portal = _ref8$portal === void 0 ? true : _ref8$portal,\n      position = _ref8.position,\n      props = _objectWithoutPropertiesLoose(_ref8, [\"children\", \"portal\", \"position\"]);\n\n  var _useContext5 = useContext(MenuContext),\n      buttonRef = _useContext5.buttonRef,\n      buttonClickedRef = _useContext5.buttonClickedRef,\n      dispatch = _useContext5.dispatch,\n      menuRef = _useContext5.menuRef,\n      popoverRef = _useContext5.popoverRef,\n      isExpanded = _useContext5.state.isExpanded;\n\n  var ref = useForkedRef(popoverRef, forwardedRef);\n  useEffect(function () {\n    function listener(event) {\n      if (buttonClickedRef.current) {\n        buttonClickedRef.current = false;\n      } else {\n        var relatedTarget = event.relatedTarget,\n            target = event.target; // We on want to close only if focus rests outside the menu\n\n        if (isExpanded && popoverRef.current) {\n          var _popoverRef$current;\n\n          if (!((_popoverRef$current = popoverRef.current) === null || _popoverRef$current === void 0 ? void 0 : _popoverRef$current.contains(relatedTarget || target))) {\n            dispatch({\n              type: CLOSE_MENU,\n              payload: {\n                buttonRef: buttonRef\n              }\n            });\n          }\n        }\n      }\n    }\n\n    window.addEventListener(\"mousedown\", listener);\n    return function () {\n      window.removeEventListener(\"mousedown\", listener);\n    };\n  }, [buttonClickedRef, buttonRef, dispatch, isExpanded, menuRef, popoverRef]);\n\n  var commonProps = _extends({\n    ref: ref,\n    // TODO: remove in 1.0\n    \"data-reach-menu\": \"\",\n    \"data-reach-menu-popover\": \"\",\n    hidden: !isExpanded,\n    children: children\n  }, props);\n\n  return portal ? React.createElement(Popover, Object.assign({}, commonProps, {\n    targetRef: buttonRef,\n    position: position\n  })) : React.createElement(\"div\", Object.assign({}, commonProps));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  MenuPopover.displayName = \"MenuPopover\";\n  MenuPopover.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * A hook that exposes data for a given `Menu` component to its descendants.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/menu-button#usemenubuttoncontext\r\n */\n\n\nfunction useMenuButtonContext() {\n  var _useContext6 = useContext(MenuContext),\n      isExpanded = _useContext6.state.isExpanded;\n\n  return useMemo(function () {\n    return {\n      isExpanded: isExpanded\n    };\n  }, [isExpanded]);\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * When a user's typed input matches the string displayed in a menu item, it is\r\n * expected that the matching menu item is selected. This is our matching\r\n * function.\r\n */\n\n\nfunction findItemFromTypeahead(items, string) {\n  if (string === void 0) {\n    string = \"\";\n  }\n\n  if (!string) {\n    return null;\n  }\n\n  var found = items.find(function (_ref9) {\n    var _element$dataset, _element$dataset$valu;\n\n    var element = _ref9.element;\n    return element === null || element === void 0 ? void 0 : (_element$dataset = element.dataset) === null || _element$dataset === void 0 ? void 0 : (_element$dataset$valu = _element$dataset.valuetext) === null || _element$dataset$valu === void 0 ? void 0 : _element$dataset$valu.toLowerCase().startsWith(string);\n  });\n  return found ? items.indexOf(found) : null;\n}\n\nfunction useMenuItemId(index) {\n  var _useContext7 = useContext(MenuContext),\n      menuId = _useContext7.menuId;\n\n  return index != null && index > -1 ? makeId(\"option-\" + index, menuId) : undefined;\n}\n\nfunction isRightClick(nativeEvent) {\n  return nativeEvent.which === 3 || nativeEvent.button === 2;\n}\n\nfunction focus(element) {\n  element && element.focus();\n}\n\nfunction reducer(state, action) {\n  if (action === void 0) {\n    action = {};\n  }\n\n  switch (action.type) {\n    case CLICK_MENU_ITEM:\n      return _extends({}, state, {\n        isExpanded: false,\n        selectionIndex: -1\n      });\n\n    case CLOSE_MENU:\n      return _extends({}, state, {\n        isExpanded: false,\n        selectionIndex: -1\n      });\n\n    case OPEN_MENU_AT_FIRST_ITEM:\n      return _extends({}, state, {\n        isExpanded: true,\n        selectionIndex: 0\n      });\n\n    case OPEN_MENU_CLEARED:\n      return _extends({}, state, {\n        isExpanded: true,\n        selectionIndex: -1\n      });\n\n    case SELECT_ITEM_AT_INDEX:\n      if (action.payload.index >= 0) {\n        return _extends({}, state, {\n          selectionIndex: action.payload.max != null ? Math.min(Math.max(action.payload.index, 0), action.payload.max) : Math.max(action.payload.index, 0)\n        });\n      }\n\n      return state;\n\n    case CLEAR_SELECTION_INDEX:\n      return _extends({}, state, {\n        selectionIndex: -1\n      });\n\n    case SET_BUTTON_ID:\n      return _extends({}, state, {\n        buttonId: action.payload\n      });\n\n    case SEARCH_FOR_ITEM:\n      if (typeof action.payload !== \"undefined\") {\n        return _extends({}, state, {\n          typeaheadQuery: action.payload\n        });\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport { Menu, MenuButton, MenuItem, MenuItems, MenuLink, MenuList, MenuPopover, useMenuButtonContext };","map":{"version":3,"sources":["../src/index.tsx"],"names":["CLEAR_SELECTION_INDEX","CLICK_MENU_ITEM","CLOSE_MENU","OPEN_MENU_AT_FIRST_ITEM","OPEN_MENU_CLEARED","SEARCH_FOR_ITEM","SELECT_ITEM_AT_INDEX","SET_BUTTON_ID","MenuDescendantContext","createDescendantContext","MenuContext","createNamedContext","initialState","buttonId","isExpanded","typeaheadQuery","selectionIndex","Menu","id","children","buttonRef","useRef","menuRef","popoverRef","descendants","setDescendants","useDescendants","state","dispatch","useReducer","_id","useId","menuId","makeId","buttonClickedRef","selectCallbacks","context","useEffect","window","focus","checkStyles","items","set","value","isOpen","PropTypes","MenuButton","forwardRefWithAs","as","Comp","onKeyDown","onMouseDown","props","useContext","ref","useForkedRef","newButtonId","type","payload","event","isRightClick","undefined","wrapEvent","node","MenuItemImpl","index","indexProp","isLink","onClick","onDragStart","onMouseEnter","onMouseLeave","onMouseMove","onMouseUp","onSelect","valueText","valueTextProp","ownRef","setValueText","useState","setValueTextFromDom","useCallback","mouseEventStarted","useDescendant","element","key","isSelected","select","ownerDocument","getOwnerDocument","listener","role","useMenuItemId","tabIndex","MenuItem","forwardedRef","isRequired","MenuItems","menuItems","match","findItemFromTypeahead","timeout","prevMenuItemsLength","usePrevious","prevSelected","prevSelectionIndex","i","handleKeyDown","selected","item","isString","query","useDescendantKeyDown","currentIndex","orientation","rotate","callback","React","MenuLink","component","console","noop","any","MenuList","forwardRef","portal","MenuPopover","position","relatedTarget","target","commonProps","hidden","targetRef","useMenuButtonContext","useMemo","string","found","nativeEvent","action","Math"],"mappings":"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","sourcesContent":["/**\n * Welcome to @reach/menu-button!\n *\n * An accessible dropdown menu for the common dropdown menu button design\n * pattern.\n *\n * @see Docs     https://reacttraining.com/reach-ui/menu-button\n * @see Source   https://github.com/reach/reach-ui/tree/master/packages/menu-button\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n *\n * TODO: Fix flash when opening a menu button on a screen with another open menu\n */\n\nimport React, {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useId } from \"@reach/auto-id\";\nimport Popover, { Position } from \"@reach/popover\";\nimport {\n  createDescendantContext,\n  Descendant,\n  DescendantProvider,\n  useDescendant,\n  useDescendants,\n  useDescendantKeyDown,\n} from \"@reach/descendants\";\nimport {\n  checkStyles,\n  createNamedContext,\n  forwardRefWithAs,\n  getOwnerDocument,\n  isFunction,\n  isString,\n  makeId,\n  noop,\n  useForkedRef,\n  usePrevious,\n  wrapEvent,\n} from \"@reach/utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n// Actions\n\nconst CLEAR_SELECTION_INDEX = \"CLEAR_SELECTION_INDEX\";\nconst CLICK_MENU_ITEM = \"CLICK_MENU_ITEM\";\nconst CLOSE_MENU = \"CLOSE_MENU\";\nconst OPEN_MENU_AT_FIRST_ITEM = \"OPEN_MENU_AT_FIRST_ITEM\";\nconst OPEN_MENU_CLEARED = \"OPEN_MENU_CLEARED\";\nconst SEARCH_FOR_ITEM = \"SEARCH_FOR_ITEM\";\nconst SELECT_ITEM_AT_INDEX = \"SELECT_ITEM_AT_INDEX\";\nconst SET_BUTTON_ID = \"SET_BUTTON_ID\";\n\nconst MenuDescendantContext = createDescendantContext<\n  HTMLElement,\n  DescendantProps\n>(\"MenuDescendantContext\");\nconst MenuContext = createNamedContext<InternalMenuContextValue>(\n  \"MenuContext\",\n  {} as InternalMenuContextValue\n);\n\nconst initialState: MenuButtonState = {\n  // The button ID is needed for aria controls and can be set directly and\n  // updated for top-level use via context. Otherwise a default is set by useId.\n  // TODO: Consider deprecating direct ID in 1.0 in favor of id at the top level\n  //       for passing deterministic IDs to descendent components.\n  buttonId: null,\n\n  // Whether or not the menu is expanded\n  isExpanded: false,\n\n  // When a user begins typing a character string, the selection will change if\n  // a matching item is found\n  typeaheadQuery: \"\",\n\n  // The index of the current selected item. When the selection is cleared a\n  // value of -1 is used.\n  selectionIndex: -1,\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Menu\n *\n * The wrapper component for the other components. No DOM element is rendered.\n *\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menu\n */\nexport const Menu: React.FC<MenuProps> = ({ id, children }) => {\n  let buttonRef = useRef(null);\n  let menuRef = useRef(null);\n  let popoverRef = useRef(null);\n  let [descendants, setDescendants] = useDescendants<\n    HTMLElement,\n    DescendantProps\n  >();\n  let [state, dispatch] = useReducer(reducer, initialState);\n  let _id = useId(id);\n  let menuId = id || makeId(\"menu\", _id);\n\n  // We use an event listener attached to the window to capture outside clicks\n  // that close the menu. We don't want the initial button click to trigger this\n  // when a menu is closed, so we can track this behavior in a ref for now.\n  // We shouldn't need this when we rewrite with state machine logic.\n  let buttonClickedRef = useRef(false);\n\n  // We will put children callbacks in a ref to avoid triggering endless render\n  // loops when using render props if the app code doesn't useCallback\n  // https://github.com/reach/reach-ui/issues/523\n  let selectCallbacks = useRef([]);\n\n  let context: InternalMenuContextValue = {\n    buttonRef,\n    dispatch,\n    menuId,\n    menuRef,\n    popoverRef,\n    buttonClickedRef,\n    selectCallbacks,\n    state,\n  };\n\n  // When the menu is open, focus is placed on the menu itself so that\n  // keyboard navigation is still possible.\n  useEffect(() => {\n    if (state.isExpanded) {\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = true;\n      window.requestAnimationFrame(() => {\n        focus(menuRef.current);\n      });\n    } else {\n      // We want to ignore the immediate focus of a tooltip so it doesn't pop\n      // up again when the menu closes, only pops up when focus returns again\n      // to the tooltip (like native OS tooltips).\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = false;\n    }\n  }, [state.isExpanded]);\n\n  useEffect(() => checkStyles(\"menu-button\"), []);\n\n  return (\n    <DescendantProvider\n      context={MenuDescendantContext}\n      items={descendants}\n      set={setDescendants}\n    >\n      <MenuContext.Provider value={context}>\n        {isFunction(children)\n          ? children({\n              isExpanded: state.isExpanded,\n              // TODO: Remove in 1.0\n              isOpen: state.isExpanded,\n            })\n          : children}\n      </MenuContext.Provider>\n    </DescendantProvider>\n  );\n};\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menu-props\n */\nexport interface MenuProps {\n  /**\n   * Requires two children: a `<MenuButton>` and a `<MenuList>`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/menu-button#menu-children\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: MenuContextValue & {\n          // TODO: Remove in 1.0\n          isOpen: boolean;\n        }\n      ) => React.ReactNode);\n  id?: string;\n}\n\nif (__DEV__) {\n  Menu.displayName = \"Menu\";\n  Menu.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuButton\n *\n * Wraps a DOM `button` that toggles the opening and closing of the dropdown\n * menu. Must be rendered inside of a `<Menu>`.\n *\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menubutton\n */\nexport const MenuButton = forwardRefWithAs<MenuButtonProps, \"button\">(\n  function MenuButton(\n    { as: Comp = \"button\", onKeyDown, onMouseDown, id, ...props },\n    forwardedRef\n  ) {\n    let {\n      buttonRef,\n      buttonClickedRef,\n      menuId,\n      state: { buttonId, isExpanded },\n      dispatch,\n    } = useContext(MenuContext);\n    let ref = useForkedRef(buttonRef, forwardedRef);\n\n    useEffect(() => {\n      let newButtonId =\n        id != null\n          ? id\n          : menuId\n          ? makeId(\"menu-button\", menuId)\n          : \"menu-button\";\n      if (buttonId !== newButtonId) {\n        dispatch({\n          type: SET_BUTTON_ID,\n          payload: newButtonId,\n        });\n      }\n    }, [buttonId, dispatch, id, menuId]);\n\n    function handleKeyDown(event: React.KeyboardEvent) {\n      switch (event.key) {\n        case \"ArrowDown\":\n        case \"ArrowUp\":\n          event.preventDefault(); // prevent scroll\n          dispatch({ type: OPEN_MENU_AT_FIRST_ITEM });\n          break;\n        case \"Enter\":\n        case \" \":\n          dispatch({ type: OPEN_MENU_AT_FIRST_ITEM });\n          break;\n        default:\n          break;\n      }\n    }\n\n    function handleMouseDown(event: React.MouseEvent) {\n      if (!isExpanded) {\n        buttonClickedRef.current = true;\n      }\n      if (isRightClick(event.nativeEvent)) {\n        return;\n      } else if (isExpanded) {\n        dispatch({ type: CLOSE_MENU, payload: { buttonRef } });\n      } else {\n        dispatch({ type: OPEN_MENU_CLEARED });\n      }\n    }\n\n    return (\n      <Comp\n        // When the menu is displayed, the element with role `button` has\n        // `aria-expanded` set to `true`. When the menu is hidden, it is\n        // recommended that `aria-expanded` is not present.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        aria-expanded={isExpanded ? true : undefined}\n        // The element with role `button` has `aria-haspopup` set to either\n        // `\"menu\"` or `true`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        aria-haspopup\n        // Optionally, the element with role `button` has a value specified for\n        // `aria-controls` that refers to the element with role `menu`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        aria-controls={menuId}\n        {...props}\n        ref={ref}\n        data-reach-menu-button=\"\"\n        id={buttonId || undefined}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n        onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n        type=\"button\"\n      />\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menubutton-props\n */\nexport type MenuButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  /**\n   * Accepts any renderable content.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/menu-button#menubutton-children\n   */\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  MenuButton.displayName = \"MenuButton\";\n  MenuButton.propTypes = {\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuItemImpl\n *\n * MenuItem and MenuLink share most of the same functionality captured here.\n */\nconst MenuItemImpl = forwardRefWithAs<MenuItemImplProps, \"div\">(\n  function MenuItemImpl(\n    {\n      as: Comp,\n      index: indexProp,\n      isLink = false,\n      onClick,\n      onDragStart,\n      onMouseDown,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseMove,\n      onMouseUp,\n      onSelect,\n      valueText: valueTextProp,\n      ...props\n    },\n    forwardedRef\n  ) {\n    let {\n      buttonRef,\n      dispatch,\n      selectCallbacks,\n      state: { selectionIndex },\n    } = useContext(MenuContext);\n\n    let ownRef = useRef<HTMLElement | null>(null);\n\n    // After the ref is mounted to the DOM node, we check to see if we have an\n    // explicit valueText prop before looking for the node's textContent for\n    // typeahead functionality.\n    let [valueText, setValueText] = useState(valueTextProp || \"\");\n    let setValueTextFromDom = useCallback(\n      (node) => {\n        if (node) {\n          ownRef.current = node;\n          if (\n            !valueTextProp ||\n            (node.textContent && valueText !== node.textContent)\n          ) {\n            setValueText(node.textContent);\n          }\n        }\n      },\n      [valueText, valueTextProp]\n    );\n\n    let ref = useForkedRef(forwardedRef, setValueTextFromDom);\n\n    let mouseEventStarted = useRef(false);\n\n    let index = useDescendant(\n      {\n        context: MenuDescendantContext,\n        element: ownRef.current!,\n        key: valueText,\n        isLink,\n      },\n      indexProp\n    );\n    let isSelected = index === selectionIndex;\n\n    // Update the callback ref array on every render\n    selectCallbacks.current[index] = onSelect;\n\n    function select() {\n      focus(buttonRef.current);\n      onSelect && onSelect();\n      dispatch({ type: CLICK_MENU_ITEM });\n    }\n\n    function handleClick(event: React.MouseEvent) {\n      if (isLink && !isRightClick(event.nativeEvent)) {\n        select();\n      }\n    }\n\n    function handleDragStart(event: React.MouseEvent) {\n      // Because we don't preventDefault on mousedown for links (we need the\n      // native click event), clicking and holding on a link triggers a\n      // dragstart which we don't want.\n      if (isLink) {\n        event.preventDefault();\n      }\n    }\n\n    function handleMouseDown(event: React.MouseEvent) {\n      if (isRightClick(event.nativeEvent)) return;\n\n      if (isLink) {\n        // Signal that the mouse is down so we can react call the right function\n        // if the user is clicking on a link.\n        mouseEventStarted.current = true;\n      } else {\n        event.preventDefault();\n      }\n    }\n\n    function handleMouseEnter(event: React.MouseEvent) {\n      if (!isSelected && index != null) {\n        dispatch({ type: SELECT_ITEM_AT_INDEX, payload: { index } });\n      }\n    }\n\n    function handleMouseLeave(event: React.MouseEvent) {\n      // Clear out selection when mouse over a non-menu item child.\n      dispatch({ type: CLEAR_SELECTION_INDEX });\n    }\n\n    function handleMouseMove(event: React.MouseEvent) {\n      if (!isSelected && index != null) {\n        dispatch({ type: SELECT_ITEM_AT_INDEX, payload: { index } });\n      }\n    }\n\n    function handleMouseUp(event: React.MouseEvent) {\n      if (isRightClick(event.nativeEvent)) return;\n\n      if (isLink) {\n        // If a mousedown event was initiated on a menu link followed by a\n        // mouseup event on the same link, we do nothing; a click event will\n        // come next and handle selection. Otherwise, we trigger a click event.\n        if (mouseEventStarted.current) {\n          mouseEventStarted.current = false;\n        } else if (ownRef.current) {\n          ownRef.current.click();\n        }\n      } else {\n        select();\n      }\n    }\n\n    // Any time a mouseup event occurs anywhere in the document, we reset the\n    // mouseEventStarted ref so we can check it again when needed.\n    useEffect(() => {\n      let ownerDocument = getOwnerDocument(ownRef.current) || document;\n      let listener = () => (mouseEventStarted.current = false);\n      ownerDocument.addEventListener(\"mouseup\", listener);\n      return () => ownerDocument.removeEventListener(\"mouseup\", listener);\n    }, []);\n\n    return (\n      <Comp\n        role=\"menuitem\"\n        id={useMenuItemId(index)}\n        tabIndex={-1}\n        {...props}\n        ref={ref}\n        data-reach-menu-item=\"\"\n        data-selected={isSelected ? \"\" : undefined}\n        data-valuetext={valueText}\n        onClick={wrapEvent(onClick, handleClick)}\n        onDragStart={wrapEvent(onDragStart, handleDragStart)}\n        onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n        onMouseEnter={wrapEvent(onMouseEnter, handleMouseEnter)}\n        onMouseLeave={wrapEvent(onMouseLeave, handleMouseLeave)}\n        onMouseMove={wrapEvent(onMouseMove, handleMouseMove)}\n        onMouseUp={wrapEvent(onMouseUp, handleMouseUp)}\n      />\n    );\n  }\n);\n\nexport type MenuItemImplProps = {\n  /**\n   * You can put any type of content inside of a `<MenuItem>`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitem-children\n   */\n  children: React.ReactNode;\n  /**\n   * Callback that fires when a `MenuItem` is selected.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitem-onselect\n   */\n  onSelect(): void;\n  index?: number;\n  isLink?: boolean;\n  valueText?: string;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuItem\n *\n * Handles menu selection. Must be a direct child of a `<MenuList>`.\n *\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitem\n */\nexport const MenuItem = forwardRefWithAs<MenuItemProps, \"div\">(\n  function MenuItem({ as = \"div\", ...props }, forwardedRef) {\n    return <MenuItemImpl {...props} ref={forwardedRef} as={as} />;\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitem-props\n */\nexport type MenuItemProps = Omit<MenuItemImplProps, \"isLink\">;\n\nif (__DEV__) {\n  MenuItem.displayName = \"MenuItem\";\n  MenuItem.propTypes = {\n    as: PropTypes.any,\n    onSelect: PropTypes.func.isRequired,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuItems\n *\n * A low-level wrapper for menu items. Compose it with `MenuPopover` for more\n * control over the nested components and their rendered DOM nodes, or if you\n * need to nest arbitrary components between the outer wrapper and your list.\n *\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitems\n */\nexport const MenuItems = forwardRefWithAs<MenuItemsProps, \"div\">(\n  function MenuItems(\n    { as: Comp = \"div\", children, id, onKeyDown, ...props },\n    forwardedRef\n  ) {\n    const {\n      menuId,\n      dispatch,\n      buttonRef,\n      menuRef,\n      selectCallbacks,\n      state: { isExpanded, buttonId, selectionIndex, typeaheadQuery },\n    } = useContext(MenuContext);\n    const { descendants: menuItems } = useContext(MenuDescendantContext);\n    const ref = useForkedRef(menuRef, forwardedRef);\n\n    useEffect(() => {\n      // Respond to user char key input with typeahead\n      const match = findItemFromTypeahead(menuItems, typeaheadQuery);\n      if (typeaheadQuery && match != null) {\n        dispatch({\n          type: SELECT_ITEM_AT_INDEX,\n          payload: { index: match },\n        });\n      }\n      let timeout = window.setTimeout(\n        () =>\n          typeaheadQuery && dispatch({ type: SEARCH_FOR_ITEM, payload: \"\" }),\n        1000\n      );\n      return () => window.clearTimeout(timeout);\n    }, [dispatch, menuItems, typeaheadQuery]);\n\n    const prevMenuItemsLength = usePrevious(menuItems.length);\n    const prevSelected = usePrevious(menuItems[selectionIndex]);\n    const prevSelectionIndex = usePrevious(selectionIndex);\n\n    useEffect(() => {\n      if (selectionIndex > menuItems.length - 1) {\n        // If for some reason our selection index is larger than our possible\n        // index range (let's say the last item is selected and the list\n        // dynamically updates), we need to select the last item in the list.\n        dispatch({\n          type: SELECT_ITEM_AT_INDEX,\n          payload: { index: menuItems.length - 1 },\n        });\n      } else if (\n        // Checks if\n        //  - menu length has changed\n        //  - selection index has not changed BUT selected item has changed\n        //\n        // This prevents any dynamic adding/removing of menu items from actually\n        // changing a user's expected selection.\n        prevMenuItemsLength !== menuItems.length &&\n        selectionIndex > -1 &&\n        prevSelected &&\n        prevSelectionIndex === selectionIndex &&\n        menuItems[selectionIndex] !== prevSelected\n      ) {\n        dispatch({\n          type: SELECT_ITEM_AT_INDEX,\n          payload: {\n            index: menuItems.findIndex((i) => i.key === prevSelected.key),\n          },\n        });\n      }\n    }, [\n      dispatch,\n      menuItems,\n      prevMenuItemsLength,\n      prevSelected,\n      prevSelectionIndex,\n      selectionIndex,\n    ]);\n\n    let handleKeyDown = wrapEvent(\n      function handleKeyDown(event: React.KeyboardEvent) {\n        let { key } = event;\n\n        if (!isExpanded) {\n          return;\n        }\n\n        switch (key) {\n          case \"Enter\":\n          case \" \":\n            let selected = menuItems.find(\n              (item) => item.index === selectionIndex\n            );\n            // For links, the Enter key will trigger a click by default, but for\n            // consistent behavior across menu items we'll trigger a click when\n            // the spacebar is pressed.\n            if (selected) {\n              if (selected.isLink && selected.element) {\n                selected.element.click();\n              } else {\n                event.preventDefault();\n                // Focus the button first by default when an item is selected.\n                // We fire the onSelect callback next so the app can manage\n                // focus if needed.\n                focus(buttonRef.current);\n                selectCallbacks.current[selected.index] &&\n                  selectCallbacks.current[selected.index]();\n                dispatch({ type: CLICK_MENU_ITEM });\n              }\n            }\n            break;\n          case \"Escape\":\n            focus(buttonRef.current);\n            dispatch({ type: CLOSE_MENU, payload: { buttonRef } });\n            break;\n          case \"Tab\":\n            // prevent leaving\n            event.preventDefault();\n            break;\n          default:\n            // Check if a user is typing some char keys and respond by setting\n            // the query state.\n            if (isString(key) && key.length === 1) {\n              const query = typeaheadQuery + key.toLowerCase();\n              dispatch({\n                type: SEARCH_FOR_ITEM,\n                payload: query,\n              });\n            }\n            break;\n        }\n      },\n      useDescendantKeyDown(MenuDescendantContext, {\n        currentIndex: selectionIndex,\n        orientation: \"vertical\",\n        rotate: false,\n        callback: (index: number) => {\n          dispatch({\n            type: SELECT_ITEM_AT_INDEX,\n            payload: { index },\n          });\n        },\n        key: \"index\",\n      })\n    );\n\n    return (\n      // TODO: Should probably file a but in jsx-a11y, but this is correct\n      // according to https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n      // eslint-disable-next-line jsx-a11y/aria-activedescendant-has-tabindex\n      <Comp\n        // Refers to the descendant menuitem element that is visually indicated\n        // as focused.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n        aria-activedescendant={useMenuItemId(selectionIndex) || undefined}\n        // Refers to the element that contains the accessible name for the\n        // `menu`. The menu is labeled by the menu button.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n        aria-labelledby={buttonId || undefined}\n        // The element that contains the menu items displayed by activating the\n        // button has role menu.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        role=\"menu\"\n        tabIndex={-1}\n        {...props}\n        ref={ref}\n        data-reach-menu-items=\"\"\n        id={menuId}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitems-props\n */\nexport type MenuItemsProps = {\n  /**\n   * Can contain only `MenuItem` or a `MenuLink`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/menu-button#menuitems-children\n   */\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nif (__DEV__) {\n  MenuItems.displayName = \"MenuItems\";\n  MenuItems.propTypes = {\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuLink\n *\n * Handles linking to a different page in the menu. By default it renders `<a>`,\n * but also accepts any other kind of Link as long as the `Link` uses the\n * `React.forwardRef` API.\n *\n * Must be a direct child of a `<MenuList>`.\n *\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menulink\n */\nexport const MenuLink = forwardRefWithAs<\n  MenuLinkProps & { component?: any },\n  \"a\"\n>(function MenuLink({ as = \"a\", component, onSelect, ...props }, forwardedRef) {\n  if (component) {\n    console.warn(\n      \"[@reach/menu-button]: Please use the `as` prop instead of `component`.\"\n    );\n  }\n\n  return (\n    <div role=\"none\" tabIndex={-1}>\n      <MenuItemImpl\n        {...props}\n        ref={forwardedRef}\n        data-reach-menu-link=\"\"\n        as={as}\n        isLink={true}\n        onSelect={onSelect || noop}\n      />\n    </div>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menulink-props\n */\nexport type MenuLinkProps = Omit<MenuItemImplProps, \"isLink\" | \"onSelect\"> & {\n  onSelect?(): void;\n};\n\nif (__DEV__) {\n  MenuLink.displayName = \"MenuLink\";\n  MenuLink.propTypes = {\n    as: PropTypes.any,\n    component: PropTypes.any,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuList\n *\n * Wraps a DOM element that renders the menu items. Must be rendered inside of\n * a `<Menu>`.\n *\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menulist\n */\nexport const MenuList = forwardRef<HTMLDivElement, MenuListProps>(\n  function MenuList({ portal = true, ...props }, forwardedRef) {\n    return (\n      <MenuPopover portal={portal}>\n        <MenuItems {...props} ref={forwardedRef} data-reach-menu-list=\"\" />\n      </MenuPopover>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menulist-props\n */\nexport type MenuListProps = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Whether or not the popover should be rendered inside a portal. Defaults to\n   * `true`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/menu-button#menulist-portal\n   */\n  portal?: boolean;\n  /**\n   * Can contain only `MenuItem` or a `MenuLink`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/menu-button#menulist-children\n   */\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  MenuList.displayName = \"MenuList\";\n  MenuList.propTypes = {\n    children: PropTypes.node.isRequired,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuPopover\n *\n * A low-level wrapper for the popover that appears when a menu button is open.\n * You can compose it with `MenuItems` for more control over the nested\n * components and their rendered DOM nodes, or if you need to nest arbitrary\n * components between the outer wrapper and your list.\n *\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menupopover\n */\nexport const MenuPopover = forwardRef<any, MenuPopoverProps>(\n  function MenuPopover(\n    { children, portal = true, position, ...props },\n    forwardedRef\n  ) {\n    const {\n      buttonRef,\n      buttonClickedRef,\n      dispatch,\n      menuRef,\n      popoverRef,\n      state: { isExpanded },\n    } = useContext(MenuContext);\n\n    const ref = useForkedRef(popoverRef, forwardedRef);\n\n    useEffect(() => {\n      function listener(event: MouseEvent) {\n        if (buttonClickedRef.current) {\n          buttonClickedRef.current = false;\n        } else {\n          let { relatedTarget, target } = event;\n\n          // We on want to close only if focus rests outside the menu\n          if (isExpanded && popoverRef.current) {\n            if (\n              !popoverRef.current?.contains(\n                (relatedTarget || target) as Element\n              )\n            ) {\n              dispatch({ type: CLOSE_MENU, payload: { buttonRef } });\n            }\n          }\n        }\n      }\n      window.addEventListener(\"mousedown\", listener);\n      return () => {\n        window.removeEventListener(\"mousedown\", listener);\n      };\n    }, [\n      buttonClickedRef,\n      buttonRef,\n      dispatch,\n      isExpanded,\n      menuRef,\n      popoverRef,\n    ]);\n\n    let commonProps = {\n      ref,\n      // TODO: remove in 1.0\n      \"data-reach-menu\": \"\",\n      \"data-reach-menu-popover\": \"\",\n      hidden: !isExpanded,\n      children,\n      ...props,\n    };\n\n    return portal ? (\n      <Popover\n        {...commonProps}\n        targetRef={buttonRef as any}\n        position={position}\n      />\n    ) : (\n      <div {...commonProps} />\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/menu-button#menupopover-props\n */\nexport type MenuPopoverProps = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Must contain a `MenuItems`\n   *\n   * @see Docs https://reacttraining.com/reach-ui/menu-button#menupopover-children\n   */\n  children: React.ReactNode;\n  /**\n   * Whether or not the popover should be rendered inside a portal. Defaults to\n   * `true`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/menu-button#menupopover-portal\n   */\n  portal?: boolean;\n  position?: Position;\n};\n\nif (__DEV__) {\n  MenuPopover.displayName = \"MenuPopover\";\n  MenuPopover.propTypes = {\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Menu` component to its descendants.\n *\n * @see Docs https://reacttraining.com/reach-ui/menu-button#usemenubuttoncontext\n */\nexport function useMenuButtonContext(): MenuContextValue {\n  let {\n    state: { isExpanded },\n  } = useContext(MenuContext);\n  return useMemo(() => ({ isExpanded }), [isExpanded]);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * When a user's typed input matches the string displayed in a menu item, it is\n * expected that the matching menu item is selected. This is our matching\n * function.\n */\nfunction findItemFromTypeahead(\n  items: Descendant<HTMLElement>[],\n  string: string = \"\"\n) {\n  if (!string) {\n    return null;\n  }\n\n  const found = items.find(({ element }) =>\n    element?.dataset?.valuetext?.toLowerCase().startsWith(string)\n  );\n  return found ? items.indexOf(found) : null;\n}\n\nfunction useMenuItemId(index: number | null) {\n  let { menuId } = useContext(MenuContext);\n  return index != null && index > -1\n    ? makeId(`option-${index}`, menuId)\n    : undefined;\n}\n\ninterface MenuButtonState {\n  isExpanded: boolean;\n  selectionIndex: number;\n  buttonId: null | string;\n  typeaheadQuery: string;\n}\n\ntype MenuButtonAction =\n  | { type: \"CLICK_MENU_ITEM\" }\n  | { type: \"CLOSE_MENU\"; payload: { buttonRef: ButtonRef } }\n  | { type: \"OPEN_MENU_AT_FIRST_ITEM\" }\n  | { type: \"OPEN_MENU_CLEARED\" }\n  | {\n      type: \"SELECT_ITEM_AT_INDEX\";\n      payload: { max?: number; min?: number; index: number };\n    }\n  | { type: \"CLEAR_SELECTION_INDEX\" }\n  | { type: \"SET_BUTTON_ID\"; payload: string }\n  | { type: \"SEARCH_FOR_ITEM\"; payload: string };\n\nfunction isRightClick(nativeEvent: MouseEvent) {\n  return nativeEvent.which === 3 || nativeEvent.button === 2;\n}\n\nfunction focus<T extends HTMLElement = HTMLElement>(\n  element: T | undefined | null\n) {\n  element && element.focus();\n}\n\nfunction reducer(\n  state: MenuButtonState,\n  action: MenuButtonAction = {} as MenuButtonAction\n): MenuButtonState {\n  switch (action.type) {\n    case CLICK_MENU_ITEM:\n      return {\n        ...state,\n        isExpanded: false,\n        selectionIndex: -1,\n      };\n    case CLOSE_MENU:\n      return {\n        ...state,\n        isExpanded: false,\n        selectionIndex: -1,\n      };\n    case OPEN_MENU_AT_FIRST_ITEM:\n      return {\n        ...state,\n        isExpanded: true,\n        selectionIndex: 0,\n      };\n    case OPEN_MENU_CLEARED:\n      return {\n        ...state,\n        isExpanded: true,\n        selectionIndex: -1,\n      };\n    case SELECT_ITEM_AT_INDEX:\n      if (action.payload.index >= 0) {\n        return {\n          ...state,\n          selectionIndex:\n            action.payload.max != null\n              ? Math.min(Math.max(action.payload.index, 0), action.payload.max)\n              : Math.max(action.payload.index, 0),\n        };\n      }\n      return state;\n    case CLEAR_SELECTION_INDEX:\n      return {\n        ...state,\n        selectionIndex: -1,\n      };\n    case SET_BUTTON_ID:\n      return {\n        ...state,\n        buttonId: action.payload,\n      };\n    case SEARCH_FOR_ITEM:\n      if (typeof action.payload !== \"undefined\") {\n        return {\n          ...state,\n          typeaheadQuery: action.payload,\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype DescendantProps = { key: string; isLink: boolean };\ntype ButtonRef = React.RefObject<null | HTMLElement>;\ntype MenuRef = React.RefObject<null | HTMLElement>;\ntype PopoverRef = React.RefObject<null | HTMLElement>;\n\ninterface InternalMenuContextValue {\n  buttonRef: ButtonRef;\n  buttonClickedRef: React.MutableRefObject<boolean>;\n  dispatch: React.Dispatch<MenuButtonAction>;\n  menuId: string | undefined;\n  menuRef: MenuRef;\n  popoverRef: PopoverRef;\n  selectCallbacks: React.MutableRefObject<(() => void)[]>;\n  state: MenuButtonState;\n}\n\nexport type MenuContextValue = {\n  isExpanded: boolean;\n  // id: string | undefined;\n};\n"]},"metadata":{},"sourceType":"module"}