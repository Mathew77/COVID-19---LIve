{"ast":null,"code":"import _slicedToArray from \"/Users/matosky/pomade-covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/matosky/pomade-covid/src/views/UsersList/UsersListTable.js\";\nimport React, { useEffect, useState } from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { useSelector, useDispatch } from 'react-redux';\nimport MaterialTable from 'material-table';\nimport { fetchAllRegisterUsers } from '../../actions/users';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Link } from 'react-router-dom';\nimport { url } from './../../api';\n\nconst UsersListTable = () => {\n  const ListUsers = useSelector(state => state.listOfUsers.regusers);\n  const dispatch = useDispatch();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  console.log(ListUsers);\n  useEffect(() => {\n    setLoading('true');\n\n    const onSuccess = () => {\n      setLoading(false);\n    };\n\n    const onError = () => {\n      setLoading(false);\n    };\n\n    dispatch(fetchAllRegisterUsers(onSuccess, onError));\n  }, [dispatch]); //const questList = questionsList\n\n  function getcountry(getCountryId) {\n    async function getCharacters() {\n      const response = await fetch(url + \"country/\" + getCountryId);\n      console.log(response);\n      const countryname = await response.json();\n      return countryname.name;\n    }\n\n    getCharacters();\n  }\n\n  return React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(MaterialTable, {\n    title: \"List of Register Users\",\n    columns: [{\n      title: \" ID\",\n      field: \"id\"\n    }, {\n      title: \"Country\",\n      field: \"country\"\n    }, {\n      title: \"IMEI \",\n      field: \"imei\",\n      filtering: false\n    }, {\n      title: \"Created\",\n      field: \"created\",\n      filtering: false\n    }, {\n      title: \"Address(Lat. & Long)\",\n      field: \"address\",\n      filtering: false\n    }, {\n      title: \"Others\",\n      field: \"others\",\n      filtering: false\n    }, {\n      title: \"Action\",\n      field: \"actions\",\n      filtering: false\n    }],\n    isLoading: loading,\n    data: ListUsers.map(row => ({\n      id: row.id,\n      country: getcountry(row.country),\n      imei: row.imei,\n      created: row.created,\n      address: row.lng + row.lad,\n      others: '--',\n      actions: React.createElement(Link, {\n        to: {\n          pathname: \"/\",\n          state: {\n            getpatientlists: {\n              row\n            }\n          }\n        },\n        style: {\n          cursor: \"pointer\",\n          color: \"blue\",\n          fontStyle: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"Enter Result\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        \"aria-label\": \"Enter Result\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(VisibilityIcon, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }))))\n    })),\n    options: {\n      headerStyle: {\n        backgroundColor: \"#9F9FA5\",\n        color: \"#000\",\n        margin: \"auto\"\n      },\n      filtering: true,\n      exportButton: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })));\n};\n\nexport default UsersListTable;","map":{"version":3,"sources":["/Users/matosky/pomade-covid/src/views/UsersList/UsersListTable.js"],"names":["React","useEffect","useState","PerfectScrollbar","useSelector","useDispatch","MaterialTable","fetchAllRegisterUsers","VisibilityIcon","Tooltip","IconButton","Link","url","UsersListTable","ListUsers","state","listOfUsers","regusers","dispatch","loading","setLoading","console","log","onSuccess","onError","getcountry","getCountryId","getCharacters","response","fetch","countryname","json","name","title","field","filtering","map","row","id","country","imei","created","address","lng","lad","others","actions","pathname","getpatientlists","cursor","color","fontStyle","headerStyle","backgroundColor","margin","exportButton"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { useSelector, useDispatch } from 'react-redux';\nimport MaterialTable from 'material-table';\nimport { fetchAllRegisterUsers } from '../../actions/users'\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Link } from 'react-router-dom'\nimport {url} from './../../api'\n\nconst UsersListTable = () => {\n  const ListUsers = useSelector(state => state.listOfUsers.regusers);\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false)\n  console.log(ListUsers)\n\n  useEffect(() => {\n      setLoading('true');\n      const onSuccess = () => {\n        setLoading(false)\n      }\n      const onError = () => {\n        setLoading(false)     \n      }\n    dispatch(fetchAllRegisterUsers(onSuccess,onError))\n  }, [dispatch])\n  //const questList = questionsList\n  function getcountry(getCountryId) {\n    async function getCharacters() {\n      const response = await fetch(url+\"country/\"+getCountryId);\n      console.log(response)\n      const countryname = await response.json();\n      return countryname.name\n      \n    }\n     getCharacters();\n  }\n\n  return (\n\n        <PerfectScrollbar>\n          <div >\n          <MaterialTable\n        title=\"List of Register Users\"\n        columns={[\n          { title: \" ID\", field: \"id\" },\n          {\n            title: \"Country\",\n            field: \"country\",\n          },\n          \n          {\n            title: \"IMEI \",\n            field: \"imei\",\n            filtering: false\n          },\n          {\n            title: \"Created\",\n            field: \"created\",\n            filtering: false\n          },\n          {\n            title: \"Address(Lat. & Long)\",\n            field: \"address\",\n            filtering: false\n          },\n          {\n            title: \"Others\",\n            field: \"others\",\n            filtering: false\n          },\n          {\n            title: \"Action\",\n            field: \"actions\",\n            filtering: false,\n          },\n        ]}\n        isLoading={loading}\n        data={ListUsers.map((row) => ({\n          id: row.id,\n          country: getcountry(row.country),          \n          imei: row.imei,\n          created: row.created,\n          address: row.lng + row.lad,\n          others: '--',\n         \n          actions: <Link to ={{ \n                        pathname: \"/\",  \n                        state: { getpatientlists:{row}}\n                        }} \n                        style={{ cursor: \"pointer\", color: \"blue\", \n                        fontStyle: \"bold\" }}>\n                          <Tooltip title=\"Enter Result\">\n                            <IconButton aria-label=\"Enter Result\" >\n                            <VisibilityIcon color=\"primary\"/>\n                          </IconButton>\n                          </Tooltip>\n                        </Link>\n\n            }))}\n        options={{\n        \n          headerStyle: {\n            backgroundColor: \"#9F9FA5\",\n            color: \"#000\",\n            margin: \"auto\"\n          },\n          filtering: true,          \n          exportButton: true,\n          \n        }}\n\n      />\n          </div>\n        </PerfectScrollbar>\n     \n  );\n};\n\n\n\nexport default UsersListTable;\n"]},"metadata":{},"sourceType":"module"}