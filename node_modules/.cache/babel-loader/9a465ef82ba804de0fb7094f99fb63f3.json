{"ast":null,"code":"import { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport observeRect from '@reach/observe-rect';\nimport { useIsomorphicLayoutEffect } from '@reach/utils';\n/**\r\n * Welcome to @reach/rect!\r\n *\r\n * Measures DOM elements (aka. bounding client rect).\r\n *\r\n * @see getBoundingClientRect https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\r\n * @see Docs                  https://reacttraining.com/reach-ui/rect\r\n * @see Source                https://github.com/reach/reach-ui/tree/master/packages/rect\r\n */\n\n/**\r\n * Rect\r\n *\r\n * @param props\r\n */\n\nvar Rect = function Rect(_ref) {\n  var onChange = _ref.onChange,\n      _ref$observe = _ref.observe,\n      observe = _ref$observe === void 0 ? true : _ref$observe,\n      children = _ref.children;\n  var ref = useRef(null);\n  var rect = useRect(ref, observe, onChange);\n  return children({\n    ref: ref,\n    rect: rect\n  });\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  Rect.displayName = \"Rect\";\n  Rect.propTypes = {\n    children: PropTypes.func.isRequired,\n    observe: PropTypes.bool,\n    onChange: PropTypes.func\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * useRect\r\n *\r\n * @param nodeRef\r\n * @param observe\r\n * @param onChange\r\n */\n\n\nfunction useRect(nodeRef, observe, onChange) {\n  if (observe === void 0) {\n    observe = true;\n  }\n\n  var initialRectSet = useRef(false);\n\n  var _useState = useState(null),\n      rect = _useState[0],\n      setRect = _useState[1];\n\n  var observerRef = useRef(null);\n  useIsomorphicLayoutEffect(function () {\n    var cleanup = function cleanup() {\n      observerRef.current && observerRef.current.unobserve();\n    };\n\n    if (!nodeRef.current) {\n      console.warn(\"You need to place the ref\");\n      return cleanup;\n    }\n\n    if (!observerRef.current) {\n      observerRef.current = observeRect(nodeRef.current, function (rect) {\n        onChange && onChange(rect);\n        setRect(rect);\n      });\n    }\n\n    if (!initialRectSet.current) {\n      initialRectSet.current = true;\n      setRect(nodeRef.current.getBoundingClientRect());\n    }\n\n    observe && observerRef.current.observe();\n    return cleanup; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [observe, onChange]);\n  return rect;\n}\n\nexport default Rect;\nexport { Rect, useRect };","map":null,"metadata":{},"sourceType":"module"}