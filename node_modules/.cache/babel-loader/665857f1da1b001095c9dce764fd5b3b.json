{"ast":null,"code":"import _objectSpread from\"/Users/matosky/pomade-covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/matosky/pomade-covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/matosky/pomade-covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useState}from'react';import{withStyles}from'@material-ui/core/styles';import Dialog from'@material-ui/core/Dialog';import MuiDialogTitle from'@material-ui/core/DialogTitle';import MuiDialogContent from'@material-ui/core/DialogContent';import IconButton from'@material-ui/core/IconButton';import CloseIcon from'@material-ui/icons/Close';import Typography from'@material-ui/core/Typography';import{makeStyles}from'@material-ui/styles';import{Button}from'@material-ui/core';import{Card,CardContent,CardActions,Divider,Grid,TextField}from'@material-ui/core';import{ToastContainer}from\"react-toastify\";import\"react-toastify/dist/ReactToastify.css\";import{Spinner}from'reactstrap';import{connect}from'react-redux';import{createHealthType}from'./../../actions/healthtips';import{useHistory}from\"react-router-dom\";var styles=function styles(theme){return{root:{margin:0,padding:theme.spacing(2)},closeButton:{position:'absolute',right:theme.spacing(1),top:theme.spacing(1),color:theme.palette.grey[500]}};};var useStyles=makeStyles(function(theme){return{root:{},row:{height:'42px',display:'flex',alignItems:'center',marginTop:theme.spacing(1)},spacer:{flexGrow:1},input:{display:'none'}};});var DialogTitle=withStyles(styles)(function(props){var children=props.children,classes=props.classes,onClose=props.onClose,other=_objectWithoutProperties(props,[\"children\",\"classes\",\"onClose\"]);return/*#__PURE__*/React.createElement(MuiDialogTitle,Object.assign({disableTypography:true,className:classes.root},other),/*#__PURE__*/React.createElement(Typography,{variant:\"h6\"},children),onClose?/*#__PURE__*/React.createElement(IconButton,{\"aria-label\":\"close\",className:classes.closeButton,onClick:onClose},/*#__PURE__*/React.createElement(CloseIcon,null)):null);});var DialogContent=withStyles(function(theme){return{root:{padding:theme.spacing(2)}};})(MuiDialogContent);var AddHealthType=function AddHealthType(props){var history=useHistory();var classes=useStyles();var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),open=_React$useState2[0],setOpen=_React$useState2[1];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var handleClickOpen=function handleClickOpen(){setOpen(true);};var handleClose=function handleClose(){setOpen(false);};var _useState3=useState({name:\"\"}),_useState4=_slicedToArray(_useState3,2),values=_useState4[0],setValues=_useState4[1];var savehealthtype=function savehealthtype(e){e.preventDefault();console.log(values);var onSuccess=function onSuccess(){setLoading(false);history.push(\"/healthtips\");handleClose();};var onError=function onError(){setLoading(false);handleClose();};props.createHealthType(values,onSuccess,onError);};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(ToastContainer,{autoClose:3000,hideProgressBar:true}),/*#__PURE__*/React.createElement(\"div\",{className:classes.row},/*#__PURE__*/React.createElement(\"span\",{className:classes.spacer}),/*#__PURE__*/React.createElement(Button,{color:\"primary\",variant:\"contained\",onClick:handleClickOpen},\"Add Tips Type\")),/*#__PURE__*/React.createElement(Dialog,{onClose:handleClose,\"aria-labelledby\":\"customized-dialog-title\",open:open,fullWidth:\"false\",maxWidth:\"sm\"},/*#__PURE__*/React.createElement(DialogTitle,{id:\"customized-dialog-title\",onClose:handleClose},\"Add Health Tips Type\"),/*#__PURE__*/React.createElement(DialogContent,{dividers:true},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(\"form\",{autoComplete:\"off\",noValidate:true,onSubmit:savehealthtype},/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(Grid,{container:true,spacing:3},/*#__PURE__*/React.createElement(Grid,{item:true,md:12,xs:12},/*#__PURE__*/React.createElement(TextField,{fullWidth:true,label:\"Health Type\",id:\"name\",className:classes.textField,helperText:\"Health Type\",onChange:function onChange(e){return setValues(_objectSpread(_objectSpread({},values),{},{name:e.target.value}));},variant:\"outlined\",type:\"text\"})))),/*#__PURE__*/React.createElement(Divider,null),/*#__PURE__*/React.createElement(CardActions,null,loading?/*#__PURE__*/React.createElement(Spinner,null):\"\",/*#__PURE__*/React.createElement(Button,{color:\"primary\",variant:\"contained\",type:\"submit\"},\"Save\")))))));};export default connect(null,{createHealthType:createHealthType})(AddHealthType);","map":{"version":3,"sources":["/Users/matosky/pomade-covid/src/views/HealthTipsTypes/AddHealthType.js"],"names":["React","useState","withStyles","Dialog","MuiDialogTitle","MuiDialogContent","IconButton","CloseIcon","Typography","makeStyles","Button","Card","CardContent","CardActions","Divider","Grid","TextField","ToastContainer","Spinner","connect","createHealthType","useHistory","styles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","useStyles","row","height","display","alignItems","marginTop","spacer","flexGrow","input","DialogTitle","props","children","classes","onClose","other","DialogContent","AddHealthType","history","open","setOpen","loading","setLoading","handleClickOpen","handleClose","name","values","setValues","savehealthtype","e","preventDefault","console","log","onSuccess","push","onError","textField","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button } from '@material-ui/core';\nimport {\n    Card,\n    CardContent,\n    CardActions,\n    Divider,\n    Grid,\n    TextField\n  } from '@material-ui/core';\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Spinner } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport {createHealthType} from './../../actions/healthtips'\nimport { useHistory } from \"react-router-dom\"; \n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  \n});\n\nconst useStyles = makeStyles(theme => ({\n    root: {},\n    row: {\n      height: '42px',\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: theme.spacing(1)\n    },\n    spacer: {\n      flexGrow: 1\n    },\n    \n    input: {\n        display: 'none',\n      },\n  }));\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\n\n const  AddHealthType = (props) => {\n  \n  let history = useHistory(); \n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [loading, setLoading] = useState(false)\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [values, setValues] = useState({name:\"\"});\n\n  const savehealthtype = e => {\n    e.preventDefault()\n    console.log(values)\n    const onSuccess = () => {\n        setLoading(false);\n        history.push(\"/healthtips\");\n        handleClose() \n\n\n      }\n      const onError = () => {\n        setLoading(false); \n        handleClose()       \n      }\n      props.createHealthType(values, onSuccess,onError)\n  }\n\n\n  return (\n    <div>\n    <ToastContainer autoClose={3000} hideProgressBar />\n      <div className={classes.row}>\n      <span className={classes.spacer} />\n      <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={handleClickOpen}\n        >\n         Add Tips Type\n        </Button>\n        \n      </div>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}\n            fullWidth='false'\n            maxWidth='sm'\n      >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Add Health Tips Type\n        </DialogTitle>\n        <DialogContent dividers>\n        <Card>\n            <form\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={savehealthtype}\n            >\n               \n                <CardContent>\n\n                <Grid\n                    container\n                    spacing={3}\n                >\n                   \n                    <Grid\n                    item\n                    md={12}\n                    xs={12}\n                    >\n                    \n                     <TextField\n                        fullWidth\n                        label=\"Health Type\"\n                        id=\"name\"\n                        className={classes.textField}\n                        helperText=\"Health Type\"\n                        onChange={e =>\n                            setValues({\n                              ...values,\n                              name: e.target.value\n                            })\n                          }\n                        variant=\"outlined\"\n                        type=\"text\"\n                       \n                    />\n                    </Grid>\n                   \n                 \n                </Grid>\n                </CardContent>\n                <Divider />\n                <CardActions>\n                {loading ? <Spinner /> : \"\"}\n\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        type='submit'\n                    >\n                        Save\n                    </Button>\n                 \n                </CardActions>\n            </form>\n         </Card>\n        </DialogContent>\n\n      </Dialog>\n    </div>\n  );\n}\n\n\nexport default connect(null, { createHealthType })(AddHealthType);\n\n\n"]},"metadata":{},"sourceType":"module"}